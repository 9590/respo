{:package "respo",
 :root {:ns "app.core", :def "render-app!"},
 :files {"app.core" {:ns ["ns"
                          "respo.app.core"
                          [":require"
                           ["respo.app.comp.container" ":refer" ["comp-container"]]
                           ["respo.core" ":refer" ["render!"]]
                           ["respo.app.schema" ":as" "schema"]
                           ["respo.app.updater.core" ":refer" ["updater"]]
                           ["respo.util.id" ":refer" ["get-id!"]]]],
                     :defs {"render-app!" ["defn"
                                           "render-app!"
                                           ["mount-target"]
                                           ["render!" "mount-target" ["comp-container" "@*store"] "dispatch!"]],
                            "*store" ["def" "*store" ["atom" "schema/store"]],
                            "dispatch!" ["defn"
                                         "dispatch!"
                                         ["op" "op-data"]
                                         ["--" "println" "op"]
                                         ["let"
                                          [["op-id" ["get-id!"]] ["store" ["updater" "@*store" "op" "op-data" "op-id"]]]
                                          ["reset!" "*store" "store"]]]},
                     :procs []},
         "comp.inspect" {:ns ["ns"
                              "respo.comp.inspect"
                              [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "pre" "<>"]]]
                              [":require"
                               ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "respo.env" ":refer" ["[]" "data->native"]]
                               ["[]" "polyfill.core" ":refer" ["[]" "log*"]]]],
                         :defs {"style-data" ["def"
                                              "style-data"
                                              ["{}"
                                               [":position" ":absolute"]
                                               [":background-color" ["hsl" "240" "100" "0"]]
                                               [":color" ":white"]
                                               [":opacity" "0.2"]
                                               [":font-size" "|12px"]
                                               [":font-family" "|Avenir,Verdana"]
                                               [":line-height" "1.4"]
                                               [":padding" "|2px 6px"]
                                               [":border-radius" "|4px"]
                                               [":max-width" "160"]
                                               [":max-height" "32"]
                                               [":white-space" ":normal"]
                                               [":overflow" ":ellipsis"]
                                               [":cursor" ":default"]]],
                                "on-click" ["defn"
                                            "on-click"
                                            ["data"]
                                            ["fn"
                                             ["e" "dispatch!"]
                                             ["let"
                                              [["raw" ["pr-str" "data"]]]
                                              ["if"
                                               [">" ["count" "raw"] "60"]
                                               ["log*" ["data->native" "data"]]
                                               ["log*" "raw"]]]]],
                                "grab-info" ["defn"
                                             "grab-info"
                                             ["data"]
                                             ["cond"
                                              [["map?" "data"] ["str" "|Map/" ["count" "data"]]]
                                              [["vector?" "data"] ["str" "|Vector/" ["count" "data"]]]
                                              [["set?" "data"] ["str" "|Set/" ["count" "data"]]]
                                              [["nil?" "data"] "|nil"]
                                              [["number?" "data"] ["str" "data"]]
                                              [["keyword?" "data"] ["str" "data"]]
                                              [["boolean?" "data"] ["str" "data"]]
                                              [["fn?" "data"] "|Fn"]
                                              [":else" ["pr-str" "data"]]]],
                                "comp-inspect" ["defcomp"
                                                "comp-inspect"
                                                ["tip" "data" "style"]
                                                ["pre"
                                                 ["{}"
                                                  [":inner-text" ["str" "tip" "|: " ["grab-info" "data"]]]
                                                  [":style" ["merge" "style-data" "style"]]
                                                  [":on" ["{}" [":click" ["on-click" "data"]]]]]]]},
                         :procs []},
         "render.html" {:ns ["ns"
                             "respo.render.html"
                             [":require"
                              ["[]" "clojure.string" ":as" "string"]
                              ["[]"
                               "respo.util.format"
                               ":refer"
                               ["[]" "prop->attr" "purify-element" "mute-element" "ensure-string" "text->html"]]
                              ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?"]]
                              ["[]" "respo.render.expand" ":refer" ["[]" "render-app"]]]],
                        :defs {"element->html" ["defn"
                                                "element->html"
                                                ["element"]
                                                ["let"
                                                 [["tag-name" ["name" [":name" "element"]]]
                                                  ["attrs" ["into" ["{}"] [":attrs" "element"]]]
                                                  ["text-inside"
                                                   ["or" [":innerHTML" "attrs"] ["text->html" [":inner-text" "attrs"]]]]
                                                  ["tailored-props"
                                                   ["->" "attrs" ["dissoc" ":innerHTML"] ["dissoc" ":inner-text"]]]
                                                  ["props-in-string" ["props->string" "tailored-props"]]
                                                  ["children"
                                                   ["->>"
                                                    [":children" "element"]
                                                    ["map"
                                                     ["fn"
                                                      ["entry"]
                                                      ["let" [["child" ["last" "entry"]]] ["element->html" "child"]]]]]]]
                                                 ["str"
                                                  "|<"
                                                  "tag-name"
                                                  ["if" [">" ["count" "props-in-string"] "0"] "| " "|"]
                                                  "props-in-string"
                                                  "|>"
                                                  ["or" "text-inside" ["string/join" "|" "children"]]
                                                  "|</"
                                                  "tag-name"
                                                  "|>"]]],
                               "make-html" ["defn"
                                            "make-html"
                                            ["tree"]
                                            ["let"
                                             [["element" ["render-app" "tree" "nil"]]]
                                             ["element->html" ["purify-element" ["mute-element" "element"]]]]],
                               "style->string" ["defn"
                                                "style->string"
                                                ["styles"]
                                                ["->>"
                                                 "styles"
                                                 ["map"
                                                  ["fn"
                                                   ["entry"]
                                                   ["let"
                                                    [["k" ["first" "entry"]] ["v" ["last" "entry"]]]
                                                    ["str"
                                                     ["name" "k"]
                                                     "|:"
                                                     ["if" ["string?" "v"] ["escape-html" "v"] ["ensure-string" "v"]]
                                                     "|;"]]]]
                                                 ["string/join" "|"]]],
                               "element->string" ["defn"
                                                  "element->string"
                                                  ["element"]
                                                  ["let"
                                                   [["tag-name" ["name" [":name" "element"]]]
                                                    ["attrs" ["into" ["{}"] [":attrs" "element"]]]
                                                    ["styles" ["or" [":style" "element"] ["{}"]]]
                                                    ["text-inside"
                                                     ["or"
                                                      [":innerHTML" "attrs"]
                                                      ["text->html" [":inner-text" "attrs"]]]]
                                                    ["formatted-coord" ["pr-str" [":coord" "element"]]]
                                                    ["formatted-event"
                                                     ["pr-str" ["into" ["#{}"] ["keys" [":event" "element"]]]]]
                                                    ["tailored-props"
                                                     ["->"
                                                      "attrs"
                                                      ["dissoc" ":innerHTML"]
                                                      ["dissoc" ":inner-text"]
                                                      [["fn"
                                                        ["props"]
                                                        ["if"
                                                         [">" ["count" "styles"] "0"]
                                                         ["assoc" "props" ":style" "styles"]
                                                         "props"]]]]]
                                                    ["props-in-string" ["props->string" "tailored-props"]]
                                                    ["children"
                                                     ["->>"
                                                      [":children" "element"]
                                                      ["map"
                                                       ["fn"
                                                        ["entry"]
                                                        ["let" [["child" ["last" "entry"]]] ["element->string" "child"]]]]]]]
                                                   ["str"
                                                    "|<"
                                                    "tag-name"
                                                    ["if" [">" ["count" "props-in-string"] "0"] "| " "|"]
                                                    "props-in-string"
                                                    "|>"
                                                    ["or" "text-inside" ["string/join" "|" "children"]]
                                                    "|</"
                                                    "tag-name"
                                                    "|>"]]],
                               "make-string" ["defn"
                                              "make-string"
                                              ["tree"]
                                              ["let"
                                               [["element" ["render-app" "tree" "nil"]]]
                                               ["element->string" ["purify-element" ["mute-element" "element"]]]]],
                               "props->string" ["defn"
                                                "props->string"
                                                ["props"]
                                                ["->>"
                                                 "props"
                                                 ["filter"
                                                  ["fn"
                                                   ["entry"]
                                                   ["let"
                                                    [["k" ["first" "entry"]]]
                                                    ["not" ["re-matches" ["re-pattern" "|^:on-.+"] ["str" "k"]]]]]]
                                                 ["map" "entry->string"]
                                                 ["string/join" "| "]]],
                               "escape-html" ["defn"
                                              "escape-html"
                                              ["text"]
                                              ["->" "text" ["string/replace" ["re-pattern" "|\""] "|&quot;"]]],
                               "entry->string" ["defn"
                                                "entry->string"
                                                ["entry"]
                                                ["let"
                                                 [["k" ["first" "entry"]] ["v" ["last" "entry"]]]
                                                 ["str"
                                                  ["prop->attr" ["name" "k"]]
                                                  "|="
                                                  ["pr-str" ["if" ["=" "k" ":style"] ["style->string" "v"] "v"]]]]]},
                        :procs []},
         "util.comparator" {:ns ["ns"
                                 "respo.util.comparator"
                                 [":require" ["[]" "polyfill.core" ":refer" ["[]" "raise*"]]]],
                            :defs {"type-as-int" ["defn"
                                                  "type-as-int"
                                                  ["x"]
                                                  ["cond"
                                                   [["number?" "x"] "0"]
                                                   [["keyword?" "x"] "1"]
                                                   [["string?" "x"] "2"]
                                                   [":else" ["raise*" "|use number, keyword or string in coord!"]]]],
                                   "compare-more" ["defn"
                                                   "compare-more"
                                                   ["x" "y"]
                                                   ["let"
                                                    [["type-x" ["type-as-int" "x"]] ["type-y" ["type-as-int" "y"]]]
                                                    ["if"
                                                     ["=" "type-x" "type-y"]
                                                     ["compare" "x" "y"]
                                                     ["compare" "type-x" "type-y"]]]]},
                            :procs []},
         "controller.resolve" {:ns ["ns"
                                    "respo.controller.resolve"
                                    [":require"
                                     ["[]" "clojure.string" ":as" "string"]
                                     ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?"]]
                                     ["[]" "polyfill.core" ":refer" ["[]" "raise*"]]
                                     ["[]" "respo.util.list" ":refer" ["[]" "filter-first"]]]],
                               :defs {"get-component-at" ["defn"
                                                          "get-component-at"
                                                          [["markup" "coord"]
                                                           ["get-component-at" "nil" "markup" "coord"]]
                                                          [["acc" "markup" "coord"]
                                                           ["if"
                                                            ["empty?" "coord"]
                                                            "acc"
                                                            ["let"
                                                             [["coord-head" ["first" "coord"]]]
                                                             ["if"
                                                              ["component?" "markup"]
                                                              ["if"
                                                               ["=" [":name" "markup"] "coord-head"]
                                                               ["recur" "markup" [":tree" "markup"] ["rest" "coord"]]
                                                               "nil"]
                                                              ["let"
                                                               [["child-pair"
                                                                 ["filter-first"
                                                                  ["fn"
                                                                   ["child-entry"]
                                                                   ["=" ["get" "child-entry" "0"] "coord-head"]]
                                                                  [":children" "markup"]]]]
                                                               ["if"
                                                                ["some?" "child-pair"]
                                                                ["recur" "acc" ["last" "child-pair"] ["rest" "coord"]]
                                                                "nil"]]]]]]],
                                      "find-event-target" ["defn"
                                                           "find-event-target"
                                                           ["element" "coord" "event-name"]
                                                           ["let"
                                                            [["target-element" ["get-markup-at" "element" "coord"]]
                                                             ["element-exists?" ["some?" "target-element"]]]
                                                            ["--" "println" "|target element:" ["pr-str" "event-name"]]
                                                            ["if"
                                                             ["and"
                                                              "element-exists?"
                                                              ["contains?" [":event" "target-element"] "event-name"]]
                                                             "target-element"
                                                             ["if"
                                                              ["=" "coord" ["[]"]]
                                                              "nil"
                                                              ["if"
                                                               "element-exists?"
                                                               ["recur"
                                                                "element"
                                                                ["subvec" "coord" "0" ["-" ["count" "coord"] "1"]]
                                                                "event-name"]
                                                               "nil"]]]]],
                                      "get-markup-at" ["defn"
                                                       "get-markup-at"
                                                       ["markup" "coord"]
                                                       ["--" "println" "|markup:" ["pr-str" "coord"]]
                                                       ["if"
                                                        ["empty?" "coord"]
                                                        "markup"
                                                        ["if"
                                                         ["component?" "markup"]
                                                         ["recur" [":tree" "markup"] ["rest" "coord"]]
                                                         ["let"
                                                          [["coord-head" ["first" "coord"]]
                                                           ["child-pair"
                                                            ["filter-first"
                                                             ["fn"
                                                              ["child-entry"]
                                                              ["=" ["get" "child-entry" "0"] "coord-head"]]
                                                             [":children" "markup"]]]]
                                                          ["if"
                                                           ["some?" "child-pair"]
                                                           ["get-markup-at" ["get" "child-pair" "1"] ["rest" "coord"]]
                                                           ["raise*"
                                                            ["str"
                                                             "|child not found:"
                                                             "coord"
                                                             ["map" "first" [":children" "markup"]]]]]]]]],
                                      "all-component-coords" ["defn"
                                                              "all-component-coords"
                                                              ["markup"]
                                                              ["if"
                                                               ["component?" "markup"]
                                                               ["cons"
                                                                [":coord" "markup"]
                                                                ["all-component-coords" [":tree" "markup"]]]
                                                               ["->>"
                                                                [":children" "markup"]
                                                                ["map"
                                                                 ["fn"
                                                                  ["child-entry"]
                                                                  ["all-component-coords" ["val" "child-entry"]]]]
                                                                ["apply" "concat"]]]],
                                      "build-deliver-event" ["defn"
                                                             "build-deliver-event"
                                                             ["*global-element" "dispatch!"]
                                                             ["fn"
                                                              ["coord" "event-name" "simple-event"]
                                                              ["let"
                                                               [["target-element"
                                                                 ["find-event-target"
                                                                  "@*global-element"
                                                                  "coord"
                                                                  "event-name"]]
                                                                ["target-component"
                                                                 ["get-component-at" "@*global-element" "coord"]]
                                                                ["this-cursor" [":cursor" "target-component"]]
                                                                ["target-listener"
                                                                 ["get" [":event" "target-element"] "event-name"]]
                                                                ["mutate!"
                                                                 ["fn"
                                                                  [["next-state"]
                                                                   ["dispatch!"
                                                                    ":states"
                                                                    ["[]" "this-cursor" "next-state"]]]
                                                                  [["cursor" "next-state"]
                                                                   ["dispatch!" ":states" ["[]" "cursor" "next-state"]]]]]]
                                                               ["if"
                                                                ["some?" "target-listener"]
                                                                ["do"
                                                                 ["--"
                                                                  "println"
                                                                  "|listener found:"
                                                                  "coord"
                                                                  "event-name"]
                                                                 ["target-listener"
                                                                  "simple-event"
                                                                  "dispatch!"
                                                                  "mutate!"]]
                                                                ["--"
                                                                 "println"
                                                                 "|found no listener:"
                                                                 "coord"
                                                                 "event-name"]]]]]},
                               :procs []},
         "util.list" {:ns ["ns"
                           "respo.util.list"
                           [":require" ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?"]]]],
                      :defs {"filter-first" ["defn"
                                             "filter-first"
                                             ["f" "xs"]
                                             ["reduce" ["fn" ["acc" "x"] ["when" ["f" "x"] ["reduced" "x"]]] "nil" "xs"]],
                             "pick-attrs" ["defn"
                                           "pick-attrs"
                                           ["props"]
                                           ["if"
                                            ["nil?" "props"]
                                            ["list"]
                                            ["let"
                                             [["base-attrs"
                                               ["merge"
                                                ["->" "props" ["dissoc" ":on"] ["dissoc" ":event"] ["dissoc" ":style"]]]]]
                                             ["sort-by" "first" "base-attrs"]]]],
                             "val-exists?" ["defn" "val-exists?" ["pair"] ["some?" ["last" "pair"]]],
                             "arrange-children" ["defn"
                                                 "arrange-children"
                                                 ["children"]
                                                 ["->>"
                                                  ["if"
                                                   ["and"
                                                    ["=" "1" ["count" "children"]]
                                                    ["not" ["component?" ["first" "children"]]]
                                                    ["not" ["element?" ["first" "children"]]]]
                                                   ["first" "children"]
                                                   ["map-indexed" "vector" "children"]]
                                                  ["filter" "val-exists?"]]]},
                      :procs []},
         "app.comp.wrap" {:ns ["ns"
                               "respo.app.comp.wrap"
                               [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "div"]]]
                               [":require" ["[]" "respo.core" ":refer" ["[]" "create-comp"]]]],
                          :defs {"comp-wrap" ["defcomp" "comp-wrap" ["x"] ["div" ["{}"] "x"]]},
                          :procs []},
         "app.comp.todolist" {:ns ["ns"
                                   "respo.app.comp.todolist"
                                   [":require-macros"
                                    ["respo.macros" ":refer" ["defcomp" "div" "span" "input" "<>" "cursor->"]]]
                                   [":require"
                                    ["[]" "clojure.string" ":as" "string"]
                                    ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                    ["[]" "respo.app.comp.task" ":refer" ["[]" "comp-task"]]
                                    ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                    ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                                    ["[]" "respo.comp.inspect" ":refer" ["[]" "comp-inspect"]]
                                    ["[]" "respo.app.comp.zero" ":refer" ["[]" "comp-zero"]]
                                    ["[]" "respo.app.comp.wrap" ":refer" ["[]" "comp-wrap"]]
                                    ["[]" "polyfill.core" ":refer" ["[]" "text-width*" "io-get-time*" "set-timeout*"]]
                                    ["[]" "respo.app.style.widget" ":as" "widget"]]],
                              :defs {"clear-done" ["defn"
                                                   "clear-done"
                                                   ["e" "dispatch!"]
                                                   ["println" "|dispatch clear-done"]
                                                   ["dispatch!" ":clear" "nil"]],
                                     "handle-add" ["defn"
                                                   "handle-add"
                                                   ["state"]
                                                   ["fn"
                                                    ["e" "dispatch!" "mutate!"]
                                                    ["dispatch!" ":add" [":draft" "state"]]
                                                    ["mutate!" ["assoc" "state" ":draft" "|"]]]],
                                     "style-root" ["def"
                                                   "style-root"
                                                   ["{}"
                                                    [":color" ":black"]
                                                    [":background-color" ["hsl" "120" "20" "98"]]
                                                    [":line-height" "|24px"]
                                                    [":font-size" "16"]
                                                    [":padding" "10"]
                                                    [":font-family" "|\"微软雅黑\", Verdana"]]],
                                     "style-list" ["def"
                                                   "style-list"
                                                   ["{}"
                                                    [":color" ":black"]
                                                    [":background-color" ["hsl" "120" "20" "98"]]]],
                                     "style-toolbar" ["def"
                                                      "style-toolbar"
                                                      ["{}"
                                                       [":display" ":flex"]
                                                       [":flex-direction" ":row"]
                                                       [":justify-content" ":start"]
                                                       [":padding" "|4px 0"]
                                                       [":white-space" ":nowrap"]]],
                                     "style-panel" ["def"
                                                    "style-panel"
                                                    ["{}" [":display" ":flex"] [":margin-bottom" "4"]]],
                                     "on-test" ["defn"
                                                "on-test"
                                                ["e" "dispatch!"]
                                                ["println" "|trigger test!"]
                                                ["dispatch!" ":clear" "nil"]
                                                ["let"
                                                 [["started" ["io-get-time*"]]]
                                                 ["loop"
                                                  ["[]" "x" "200"]
                                                  ["dispatch!" ":add" "|empty"]
                                                  ["if" [">" "x" "0"] ["recur" ["dec" "x"]]]]
                                                 ["loop"
                                                  ["[]" "x" "20"]
                                                  ["dispatch!" ":hit-first" ["rand"]]
                                                  ["if" [">" "x" "0"] ["recur" ["dec" "x"]]]]
                                                 ["dispatch!" ":clear" "nil"]
                                                 ["loop"
                                                  ["[]" "x" "10"]
                                                  ["dispatch!" ":add" "|only 10 items"]
                                                  ["if" [">" "x" "0"] ["recur" ["dec" "x"]]]]
                                                 ["println" "|time cost:" ["-" ["io-get-time*"] "started"]]]],
                                     "on-focus" ["defn" "on-focus" ["e" "dispatch!"] ["println" "|Just focused~"]],
                                     "initial-state" ["def" "initial-state" ["{}" [":draft" "|"] [":locked?" "false"]]],
                                     "on-text-change" ["defn"
                                                       "on-text-change"
                                                       ["state"]
                                                       ["fn"
                                                        ["e" "dispatch!" "mutate!"]
                                                        ["mutate!" ["assoc" "state" ":draft" [":value" "e"]]]]],
                                     "on-lock" ["defn"
                                                "on-lock"
                                                ["state"]
                                                ["fn"
                                                 ["e" "dispatch!" "mutate!"]
                                                 ["mutate!" ["update" "state" ":locked?" "not"]]]],
                                     "comp-todolist" ["defcomp"
                                                      "comp-todolist"
                                                      ["states" "tasks"]
                                                      ["let"
                                                       [["state" ["or" [":data" "states"] "initial-state"]]]
                                                       ["div"
                                                        ["{}" ":style" "style-root"]
                                                        ["comp-inspect" "|States" "state" ["{}" [":left" "|80px"]]]
                                                        ["div"
                                                         ["{}" ":style" "style-panel"]
                                                         ["input"
                                                          ["{}"
                                                           [":placeholder" "|Text"]
                                                           [":value" [":draft" "state"]]
                                                           [":style"
                                                            ["merge"
                                                             "widget/input"
                                                             ["{}"
                                                              [":width"
                                                               ["max"
                                                                "200"
                                                                ["+"
                                                                 "24"
                                                                 ["text-width*"
                                                                  [":draft" "state"]
                                                                  "16"
                                                                  "|BlinkMacSystemFont"]]]]]]]
                                                           [":on"
                                                            ["{}"
                                                             [":input" ["on-text-change" "state"]]
                                                             [":focus" "on-focus"]]]]]
                                                         ["=<" "8" "nil"]
                                                         ["span"
                                                          ["{}"
                                                           [":style" "widget/button"]
                                                           [":on" ["{}" ":click" ["handle-add" "state"]]]]
                                                          ["<>" "span" "|Add" "nil"]]
                                                         ["=<" "8" "nil"]
                                                         ["span"
                                                          ["{}"
                                                           [":inner-text" "|Clear"]
                                                           [":style" "widget/button"]
                                                           [":on" ["{}" ":click" "clear-done"]]]]
                                                         ["=<" "8" "nil"]
                                                         ["div"
                                                          ["{}"]
                                                          ["div"
                                                           ["{}"
                                                            [":style" "widget/button"]
                                                            [":on" ["{}" [":click" "on-test"]]]]
                                                           ["<>" "span" "|heavy tasks" "nil"]]]]
                                                        ["div"
                                                         ["{}" [":class-name" "|task-list"] [":style" "style-list"]]
                                                         ["->>"
                                                          "tasks"
                                                          ["reverse"]
                                                          ["map"
                                                           ["fn"
                                                            ["task"]
                                                            ["let"
                                                             [["task-id" [":id" "task"]]]
                                                             ["[]"
                                                              "task-id"
                                                              ["cursor->" "task-id" "comp-task" "states" "task"]]]]]]]
                                                        ["if"
                                                         [">" ["count" "tasks"] "0"]
                                                         ["div"
                                                          ["{}" [":spell-check" "true"] [":style" "style-toolbar"]]
                                                          ["div"
                                                           ["{}"
                                                            [":style" "widget/button"]
                                                            [":on"
                                                             ["if"
                                                              [":locked?" "state"]
                                                              ["{}"]
                                                              ["{}" ":click" "clear-done"]]]]
                                                           ["<>" "span" "|Clear2" "nil"]]
                                                          ["=<" "8" "nil"]
                                                          ["div"
                                                           ["{}"
                                                            [":style" "widget/button"]
                                                            [":on" ["{}" ":click" ["on-lock" "state"]]]]
                                                           ["<>" "span" ["str" "|Lock?" [":locked?" "state"]] "nil"]]
                                                          ["=<" "8" "nil"]
                                                          ["comp-wrap" ["comp-zero"]]]]
                                                        ["comp-inspect"
                                                         "|Tasks"
                                                         "tasks"
                                                         ["{}" [":left" "500"] [":top" "20"]]]]]]},
                              :procs []},
         "util.id" {:ns ["ns" "respo.util.id"],
                    :defs {"get-id!" ["defn" "get-id!" [] ["swap!" "*cached-id" "inc"] "@*cached-id"],
                           "*cached-id" ["def" "*cached-id" ["atom" "0"]]},
                    :procs []},
         "app.comp.task" {:ns ["ns"
                               "respo.app.comp.task"
                               [":require-macros"
                                ["[]" "respo.macros" ":refer" ["[]" "defcomp" "div" "input" "span" "button" "<>"]]]
                               [":require"
                                ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                                ["[]" "respo.comp.inspect" ":refer" ["[]" "comp-inspect"]]
                                ["[]" "respo.app.style.widget" ":as" "widget"]]],
                          :defs {"style-task" ["def" "style-task" ["{}" [":display" ":flex"] [":padding" "|4px 0px"]]],
                                 "on-click" ["defn"
                                             "on-click"
                                             ["props" "state"]
                                             ["fn" ["event" "dispatch!"] ["println" "|clicked."]]],
                                 "handle-done" ["defn"
                                                "handle-done"
                                                ["task-id"]
                                                ["fn" ["e" "dispatch!"] ["dispatch!" ":toggle" "task-id"]]],
                                 "style-done" ["def"
                                               "style-done"
                                               ["{}"
                                                [":width" "32"]
                                                [":height" "32"]
                                                [":outline" ":none"]
                                                [":border" ":none"]
                                                [":vertical-align" ":middle"]]],
                                 "comp-task" ["defcomp"
                                              "comp-task"
                                              ["states" "task"]
                                              ["let"
                                               [["state" ["or" [":data" "states"] "|"]]]
                                               ["div"
                                                ["{}" [":style" "style-task"]]
                                                ["comp-inspect" "|Task" "task" ["{}" [":left" "200"]]]
                                                ["button"
                                                 ["{}"
                                                  [":style"
                                                   ["merge"
                                                    "style-done"
                                                    ["{}"
                                                     [":background-color"
                                                      ["if"
                                                       [":done?" "task"]
                                                       ["hsl" "200" "20" "80"]
                                                       ["hsl" "200" "80" "70"]]]]]]
                                                  [":on" ["{}" [":click" ["handle-done" [":id" "task"]]]]]]]
                                                ["=<" "8" "nil"]
                                                ["input"
                                                 ["{}"
                                                  [":value" [":text" "task"]]
                                                  [":style" "widget/input"]
                                                  [":on" ["{}" ":input" ["on-text-change" "task"]]]]]
                                                ["=<" "8" "nil"]
                                                ["input"
                                                 ["{}"
                                                  [":value" "state"]
                                                  [":style" "widget/input"]
                                                  [":on" ["{}" [":input" "on-text-state"]]]]]
                                                ["=<" "8" "nil"]
                                                ["div"
                                                 ["{}"
                                                  [":style" "widget/button"]
                                                  [":on" ["{}" ":click" ["handle-remove" "task"]]]]
                                                 ["<>" "span" "|Remove" "nil"]]
                                                ["=<" "8" "nil"]
                                                ["div" ["{}"] ["<>" "span" "state" "nil"]]]]],
                                 "on-text-change" ["defn"
                                                   "on-text-change"
                                                   ["task"]
                                                   ["fn"
                                                    ["event" "dispatch!"]
                                                    ["let"
                                                     [["task-id" [":id" "task"]] ["text" [":value" "event"]]]
                                                     ["dispatch!" ":update" ["{}" ":id" "task-id" ":text" "text"]]]]],
                                 "handle-remove" ["defn"
                                                  "handle-remove"
                                                  ["task"]
                                                  ["fn" ["e" "dispatch!"] ["dispatch!" ":remove" [":id" "task"]]]],
                                 "on-text-state" ["defn"
                                                  "on-text-state"
                                                  ["e" "dispatch!" "mutate!"]
                                                  ["mutate!" [":value" "e"]]]},
                          :procs []},
         "app.schema" {:ns ["ns" "respo.app.schema"],
                       :defs {"task" ["def" "task" ["{}" [":id" "nil"] [":text" "|"] [":done?" "false"]]],
                              "store" ["def" "store" ["{}" [":tasks" ["[]"]] [":states" ["{}"]]]]},
                       :procs []},
         "render.diff" {:ns ["ns"
                             "respo.render.diff"
                             [":require"
                              ["[]" "clojure.string" ":as" "string"]
                              ["[]" "respo.util.format" ":refer" ["[]" "purify-element"]]
                              ["[]" "respo.util.detect" ":refer" ["[]" "component?"]]
                              ["[]" "clojure.set" ":refer" ["[]" "difference"]]]],
                        :defs {"find-element-diffs" ["defn"
                                                     "find-element-diffs"
                                                     ["collect!" "n-coord" "old-tree" "new-tree"]
                                                     ["--"
                                                      ".log"
                                                      "js/console"
                                                      "|element diffing:"
                                                      "n-coord"
                                                      "old-tree"
                                                      "new-tree"]
                                                     ["if"
                                                      ["identical?" "old-tree" "new-tree"]
                                                      "nil"
                                                      ["cond"
                                                       [["component?" "old-tree"]
                                                        ["recur"
                                                         "collect!"
                                                         "n-coord"
                                                         ["get" "old-tree" ":tree"]
                                                         "new-tree"]]
                                                       [["component?" "new-tree"]
                                                        ["recur"
                                                         "collect!"
                                                         "n-coord"
                                                         "old-tree"
                                                         ["get" "new-tree" ":tree"]]]
                                                       [":else"
                                                        ["let"
                                                         [["old-children" [":children" "old-tree"]]
                                                          ["new-children" [":children" "new-tree"]]]
                                                         ["if"
                                                          ["or"
                                                           ["not=" [":coord" "old-tree"] [":coord" "new-tree"]]
                                                           ["not=" [":name" "old-tree"] [":name" "new-tree"]]
                                                           ["not=" [":c-name" "old-tree"] [":c-name" "new-tree"]]]
                                                          ["do"
                                                           ["collect!"
                                                            ["[]" ":replace" "n-coord" ["purify-element" "new-tree"]]]
                                                           "nil"]
                                                          ["do"
                                                           ["find-props-diffs"
                                                            "collect!"
                                                            "n-coord"
                                                            [":attrs" "old-tree"]
                                                            [":attrs" "new-tree"]]
                                                           ["let"
                                                            [["old-style" [":style" "old-tree"]]
                                                             ["new-style" [":style" "new-tree"]]]
                                                            ["if"
                                                             ["not" ["identical?" "old-style" "new-style"]]
                                                             ["find-style-diffs"
                                                              "collect!"
                                                              "n-coord"
                                                              "old-style"
                                                              "new-style"]]]
                                                           ["let"
                                                            [["old-events"
                                                              ["into" ["#{}"] ["keys" [":event" "old-tree"]]]]
                                                             ["new-events"
                                                              ["into" ["#{}"] ["keys" [":event" "new-tree"]]]]
                                                             ["added-events" ["difference" "new-events" "old-events"]]
                                                             ["removed-events" ["difference" "old-events" "new-events"]]]
                                                            ["doseq"
                                                             ["[]" "event-name" "added-events"]
                                                             ["collect!"
                                                              ["[]"
                                                               ":add-event"
                                                               "n-coord"
                                                               ["[]" "event-name" [":coord" "new-tree"]]]]]
                                                            ["doseq"
                                                             ["[]" "event-name" "removed-events"]
                                                             ["collect!" ["[]" ":rm-event" "n-coord" "event-name"]]]]
                                                           ["find-children-diffs"
                                                            "collect!"
                                                            "n-coord"
                                                            "0"
                                                            "old-children"
                                                            "new-children"]]]]]]]],
                               "find-children-diffs" ["defn"
                                                      "find-children-diffs"
                                                      ["collect!" "n-coord" "index" "old-children" "new-children"]
                                                      ["--"
                                                       ".log"
                                                       "js/console"
                                                       "|diff children:"
                                                       "n-coord"
                                                       "index"
                                                       "old-children"
                                                       "new-children"]
                                                      ["let"
                                                       [["was-empty?" ["empty?" "old-children"]]
                                                        ["now-empty?" ["empty?" "new-children"]]]
                                                       ["cond"
                                                        [["and" "was-empty?" "now-empty?"] "nil"]
                                                        [["and" "was-empty?" ["not" "now-empty?"]]
                                                         ["let"
                                                          [["element" ["last" ["first" "new-children"]]]]
                                                          ["collect!"
                                                           ["[]" ":append" "n-coord" ["purify-element" "element"]]]
                                                          ["recur"
                                                           "collect!"
                                                           "n-coord"
                                                           ["inc" "index"]
                                                           ["[]"]
                                                           ["rest" "new-children"]]]]
                                                        [["and" ["not" "was-empty?"] "now-empty?"]
                                                         ["do"
                                                          ["collect!" ["[]" ":rm" ["conj" "n-coord" "index"]]]
                                                          ["recur"
                                                           "collect!"
                                                           "n-coord"
                                                           "index"
                                                           ["rest" "old-children"]
                                                           ["[]"]]]]
                                                        [":else"
                                                         ["let"
                                                          [["old-keys" ["map" "first" ["take" "16" "old-children"]]]
                                                           ["new-keys" ["map" "first" ["take" "16" "new-children"]]]
                                                           ["x1" ["first" "old-keys"]]
                                                           ["y1" ["first" "new-keys"]]
                                                           ["match-x1" ["fn" ["x"] ["=" "x" "x1"]]]
                                                           ["match-y1" ["fn" ["x"] ["=" "x" "y1"]]]
                                                           ["x1-remains?" ["some" "match-x1" "new-keys"]]
                                                           ["y1-existed?" ["some" "match-y1" "old-keys"]]
                                                           ["old-follows" ["rest" "old-children"]]
                                                           ["new-follows" ["rest" "new-children"]]]
                                                          ["--"
                                                           "println"
                                                           "|compare:"
                                                           "x1"
                                                           "new-keys"
                                                           "x1-remains?"
                                                           "y1"
                                                           "y1-existed?"
                                                           "old-keys"]
                                                          ["cond"
                                                           [["=" "x1" "y1"]
                                                            ["let"
                                                             [["old-element" ["last" ["first" "old-children"]]]
                                                              ["new-element" ["last" ["first" "new-children"]]]]
                                                             ["find-element-diffs"
                                                              "collect!"
                                                              ["conj" "n-coord" "index"]
                                                              "old-element"
                                                              "new-element"]
                                                             ["recur"
                                                              "collect!"
                                                              "n-coord"
                                                              ["inc" "index"]
                                                              "old-follows"
                                                              "new-follows"]]]
                                                           [["and" "x1-remains?" ["not" "y1-existed?"]]
                                                            ["do"
                                                             ["collect!"
                                                              ["let"
                                                               [["element" ["last" ["first" "new-children"]]]]
                                                               ["[]"
                                                                ":add"
                                                                ["conj" "n-coord" "index"]
                                                                ["purify-element" "element"]]]]
                                                             ["recur"
                                                              "collect!"
                                                              "n-coord"
                                                              ["inc" "index"]
                                                              "old-children"
                                                              "new-follows"]]]
                                                           [["and" ["not" "x1-remains?"] "y1-existed?"]
                                                            ["do"
                                                             ["collect!" ["[]" ":rm" ["conj" "n-coord" "index"]]]
                                                             ["recur"
                                                              "collect!"
                                                              "n-coord"
                                                              "index"
                                                              "old-follows"
                                                              "new-children"]]]
                                                           [":else"
                                                            ["let"
                                                             [["xi" [".indexOf" "new-keys" "x1"]]
                                                              ["yi" [".indexOf" "old-keys" "y1"]]
                                                              ["first-old-entry" ["first" "old-children"]]
                                                              ["first-new-entry" ["first" "new-children"]]]
                                                             ["--" "println" "|index:" "xi" "yi"]
                                                             ["if"
                                                              ["<=" "xi" "yi"]
                                                              ["let"
                                                               [["new-element" ["last" ["first" "new-children"]]]]
                                                               ["collect!"
                                                                ["[]"
                                                                 ":add"
                                                                 ["conj" "n-coord" "index"]
                                                                 ["purify-element" "new-element"]]]
                                                               ["recur"
                                                                "collect!"
                                                                "n-coord"
                                                                ["inc" "index"]
                                                                "old-children"
                                                                "new-follows"]]
                                                              ["do"
                                                               ["collect!" ["[]" ":rm" ["conj" "n-coord" "index"]]]
                                                               ["recur"
                                                                "collect!"
                                                                "n-coord"
                                                                "index"
                                                                "old-follows"
                                                                "new-children"]]]]]]]]]]],
                               "find-style-diffs" ["defn"
                                                   "find-style-diffs"
                                                   ["collect!" "coord" "old-style" "new-style"]
                                                   ["let"
                                                    [["was-empty?" ["empty?" "old-style"]]
                                                     ["now-empty?" ["empty?" "new-style"]]]
                                                    ["if"
                                                     ["identical?" "old-style" "new-style"]
                                                     "nil"
                                                     ["cond"
                                                      [["and" "was-empty?" "now-empty?"] "nil"]
                                                      [["and" "was-empty?" ["not" "now-empty?"]]
                                                       ["let"
                                                        [["entry" ["first" "new-style"]]
                                                         ["follows" ["rest" "new-style"]]]
                                                        ["collect!" ["[]" ":add-style" "coord" "entry"]]
                                                        ["recur" "collect!" "coord" "old-style" "follows"]]]
                                                      [["and" ["not" "was-empty?"] "now-empty?"]
                                                       ["let"
                                                        [["entry" ["first" "old-style"]]
                                                         ["follows" ["rest" "old-style"]]]
                                                        ["collect!" ["[]" ":rm-style" "coord" ["key" "entry"]]]
                                                        ["recur" "collect!" "coord" "follows" "new-style"]]]
                                                      [":else"
                                                       ["let"
                                                        [["old-entry" ["first" "old-style"]]
                                                         ["new-entry" ["first" "new-style"]]
                                                         ["old-follows" ["rest" "old-style"]]
                                                         ["new-follows" ["rest" "new-style"]]]
                                                        ["case"
                                                         ["compare" ["key" "old-entry"] ["key" "new-entry"]]
                                                         ["-1"
                                                          ["do"
                                                           ["collect!" ["[]" ":rm-style" "coord" ["key" "old-entry"]]]
                                                           ["recur" "collect!" "coord" "old-follows" "new-style"]]]
                                                         ["1"
                                                          ["do"
                                                           ["collect!" ["[]" ":add-style" "coord" "new-entry"]]
                                                           ["recur" "collect!" "coord" "old-style" "new-follows"]]]
                                                         ["do"
                                                          ["if"
                                                           ["not"
                                                            ["identical?" ["val" "old-entry"] ["val" "new-entry"]]]
                                                           ["collect!" ["[]" ":replace-style" "coord" "new-entry"]]]
                                                          ["recur" "collect!" "coord" "old-follows" "new-follows"]]]]]]]]],
                               "find-props-diffs" ["defn"
                                                   "find-props-diffs"
                                                   ["collect!" "coord" "old-props" "new-props"]
                                                   ["--"
                                                    ".log"
                                                    "js/console"
                                                    "|find props:"
                                                    "coord"
                                                    "old-props"
                                                    "new-props"
                                                    ["count" "old-props"]
                                                    ["count" "new-props"]]
                                                   ["let"
                                                    [["was-empty?" ["empty?" "old-props"]]
                                                     ["now-empty?" ["empty?" "new-props"]]]
                                                    ["cond"
                                                     [["and" "was-empty?" "now-empty?"] "nil"]
                                                     [["and" "was-empty?" ["not" "now-empty?"]]
                                                      ["do"
                                                       ["collect!" ["[]" ":add-prop" "coord" ["first" "new-props"]]]
                                                       ["recur" "collect!" "coord" "old-props" ["rest" "new-props"]]]]
                                                     [["and" ["not" "was-empty?"] "now-empty?"]
                                                      ["do"
                                                       ["collect!"
                                                        ["[]" ":rm-prop" "coord" ["key" ["first" "old-props"]]]]
                                                       ["recur" "collect!" "coord" ["rest" "old-props"] "new-props"]]]
                                                     [":else"
                                                      ["let"
                                                       [["old-entry" ["first" "old-props"]]
                                                        ["new-entry" ["first" "new-props"]]
                                                        [["[]" "old-k" "old-v"] ["first" "old-props"]]
                                                        [["[]" "new-k" "new-v"] ["first" "new-props"]]
                                                        ["old-follows" ["rest" "old-props"]]
                                                        ["new-follows" ["rest" "new-props"]]]
                                                       ["--" ".log" "js/console" "old-k" "new-k" "old-v" "new-v"]
                                                       ["case"
                                                        ["compare" "old-k" "new-k"]
                                                        ["-1"
                                                         ["do"
                                                          ["collect!" ["[]" ":rm-prop" "coord" "old-k"]]
                                                          ["recur" "collect!" "coord" "old-follows" "new-props"]]]
                                                        ["1"
                                                         ["do"
                                                          ["collect!" ["[]" ":add-prop" "coord" "new-entry"]]
                                                          ["recur" "collect!" "coord" "old-props" "new-follows"]]]
                                                        ["do"
                                                         ["if"
                                                          ["not=" "old-v" "new-v"]
                                                          ["collect!" ["[]" ":replace-prop" "coord" "new-entry"]]]
                                                         ["recur" "collect!" "coord" "old-follows" "new-follows"]]]]]]]]},
                        :procs []},
         "comp.space" {:ns ["ns"
                            "respo.comp.space"
                            [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "div" "defcomp"]]]
                            [":require" ["[]" "respo.core" ":refer" ["[]" "create-comp"]]]],
                       :defs {"comp-space" ["defcomp"
                                            "comp-space"
                                            ["w" "h"]
                                            ["div"
                                             ["{}"
                                              [":style"
                                               ["if"
                                                ["some?" "w"]
                                                ["assoc" "style-space" ":width" "w"]
                                                ["assoc" "style-space" ":height" "h"]]]]]],
                              "style-space" ["def"
                                             "style-space"
                                             ["{}" [":height" "1"] [":width" "1"] [":display" ":inline-block"]]],
                              "=<" ["def" "=<" "comp-space"]},
                       :procs []},
         "test.comp.task" {:ns ["ns"
                                "respo.test.comp.task"
                                [":require-macros" ["respo.macros" ":refer" ["div" "span"]]]
                                [":require"
                                 ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]]],
                           :defs {"comp-task" ["def"
                                               "comp-task"
                                               ["create-comp"
                                                ":task"
                                                ["fn"
                                                 ["task"]
                                                 ["fn"
                                                  ["cursor"]
                                                  ["div" ["{}"] ["span" ["{}" [":inner-text" [":text" "task"]]]]]]]]]},
                           :procs []},
         "render.expand" {:ns ["ns"
                               "respo.render.expand"
                               [":require"
                                ["[]" "clojure.string" ":as" "string"]
                                ["[]" "polyfill.core" ":refer" ["[]" "io-get-time*"]]
                                ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?" "=seq"]]
                                ["[]" "respo.util.list" ":refer" ["[]" "filter-first"]]]],
                          :defs {"render-component" ["defn"
                                                     "render-component"
                                                     ["markup" "coord" "cursor" "old-element"]
                                                     ["if"
                                                      ["and"
                                                       ["some?" "old-element"]
                                                       ["=seq" [":args" "markup"] [":args" "old-element"]]
                                                       ["identical?" [":render" "markup"] [":render" "old-element"]]]
                                                      ["do" ["--" "println" "|not changed" "coord"] "old-element"]
                                                      ["let"
                                                       [["begin-time" ["io-get-time*"]]
                                                        ["args" [":args" "markup"]]
                                                        ["component" ["first" "markup"]]
                                                        ["new-coord" ["conj" "coord" [":name" "markup"]]]
                                                        ["new-cursor"
                                                         ["let"
                                                          [["cursor-name" [":cursor" "markup"]]]
                                                          ["if"
                                                           ["some?" "cursor-name"]
                                                           ["conj" "cursor" "cursor-name"]
                                                           "cursor"]]]
                                                        ["render" [":render" "markup"]]
                                                        ["half-render" ["apply" "render" "args"]]
                                                        ["markup-tree" ["half-render" "new-cursor"]]
                                                        ["tree"
                                                         ["render-markup"
                                                          "markup-tree"
                                                          "new-coord"
                                                          "new-coord"
                                                          "new-cursor"
                                                          [":tree" "old-element"]]]
                                                        ["cost" ["-" ["io-get-time*"] "begin-time"]]]
                                                       ["--" "println" "|markup tree:" ["pr-str" "markup-tree"]]
                                                       ["--" "println" "|no cache:" "coord"]
                                                       ["assoc"
                                                        "markup"
                                                        ":coord"
                                                        "coord"
                                                        ":tree"
                                                        "tree"
                                                        ":cost"
                                                        "cost"
                                                        ":cursor"
                                                        "new-cursor"]]]],
                                 "render-app" ["defn"
                                               "render-app"
                                               ["markup" "old-element"]
                                               ["render-markup" "markup" ["[]"] ["[]"] ["[]"] "old-element"]],
                                 "render-children" ["defn"
                                                    "render-children"
                                                    ["children" "coord" "comp-coord" "cursor" "old-children"]
                                                    ["--" "println" "|render children:" "children"]
                                                    ["let"
                                                     [["mapped-cache" ["into" ["{}"] "old-children"]]]
                                                     ["->>"
                                                      "children"
                                                      ["map"
                                                       ["fn"
                                                        ["child-entry"]
                                                        ["let"
                                                         [["k" ["first" "child-entry"]]
                                                          ["child-element" ["last" "child-entry"]]
                                                          ["old-child" ["get" "mapped-cache" "k"]]]
                                                         ["--"
                                                          "if"
                                                          ["nil?" "old-child"]
                                                          ["do" ["println" "|old child:" "coord" ["some?" "old-child"]]]]
                                                         ["[]"
                                                          "k"
                                                          ["if"
                                                           ["some?" "child-element"]
                                                           ["render-markup"
                                                            "child-element"
                                                            ["conj" "coord" "k"]
                                                            "comp-coord"
                                                            "cursor"
                                                            "old-child"]
                                                           "nil"]]]]]]]],
                                 "render-element" ["defn"
                                                   "render-element"
                                                   ["markup" "coord" "comp-coord" "cursor" "old-element"]
                                                   ["let"
                                                    [["children" [":children" "markup"]]
                                                     ["child-elements"
                                                      ["render-children"
                                                       "children"
                                                       "coord"
                                                       "comp-coord"
                                                       "cursor"
                                                       [":children" "old-element"]]]]
                                                    ["--"
                                                     ".log"
                                                     "js/console"
                                                     "|children should have order:"
                                                     ["pr-str" "children"]
                                                     ["pr-str" "child-elements"]
                                                     ["pr-str" "markup"]]
                                                    ["assoc" "markup" ":coord" "coord" ":children" "child-elements"]]],
                                 "render-markup" ["defn"
                                                  "render-markup"
                                                  ["markup" "coord" "component-coord" "cursor" "old-element"]
                                                  ["if"
                                                   ["component?" "markup"]
                                                   ["render-component" "markup" "coord" "cursor" "old-element"]
                                                   ["render-element"
                                                    "markup"
                                                    "coord"
                                                    "component-coord"
                                                    "cursor"
                                                    "old-element"]]]},
                          :procs []},
         "util.format" {:ns ["ns"
                             "respo.util.format"
                             [":require"
                              ["[]" "clojure.string" ":as" "string"]
                              ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?"]]]],
                        :defs {"prop->attr" ["defn"
                                             "prop->attr"
                                             ["x"]
                                             ["case" "x" ["|class-name" "|class"] ["|tab-index" "|tabindex"] "x"]],
                               "event->prop" ["defn" "event->prop" ["x"] ["str" "|on" ["name" "x"]]],
                               "ensure-string" ["defn"
                                                "ensure-string"
                                                ["x"]
                                                ["cond"
                                                 [["string?" "x"] "x"]
                                                 [["keyword?" "x"] ["name" "x"]]
                                                 [":else" ["str" "x"]]]],
                               "event->string" ["defn" "event->string" ["x"] ["subs" ["name" "x"] "3"]],
                               "dashed->camel" ["defn"
                                                "dashed->camel"
                                                [["x"] ["dashed->camel" "|" "x" "false"]]
                                                [["acc" "piece" "promoted?"]
                                                 ["if"
                                                  ["=" "piece" "|"]
                                                  "acc"
                                                  ["let"
                                                   [["cursor" ["get" "piece" "0"]]
                                                    ["piece-followed" ["subs" "piece" "1"]]]
                                                   ["if"
                                                    ["=" "cursor" "|-"]
                                                    ["recur" "acc" "piece-followed" "true"]
                                                    ["recur"
                                                     ["str"
                                                      "acc"
                                                      ["if" "promoted?" ["string/upper-case" "cursor"] "cursor"]]
                                                     "piece-followed"
                                                     "false"]]]]]],
                               "purify-events" ["defn"
                                                "purify-events"
                                                ["events"]
                                                ["->>" "events" "keys" ["into" ["#{}"]]]],
                               "event->edn" ["defn"
                                             "event->edn"
                                             ["event"]
                                             ["--" ".log" "js/console" "|simplify event:" "event"]
                                             ["->"
                                              ["case"
                                               [".-type" "event"]
                                               ["|click" ["{}" ":type" ":click"]]
                                               ["|keydown" ["{}" ":type" ":keydown" ":key-code" [".-keyCode" "event"]]]
                                               ["|keyup" ["{}" ":type" ":keyup" ":key-code" [".-keyCode" "event"]]]
                                               ["|input"
                                                ["{}" ":type" ":input" ":value" ["aget" [".-target" "event"] "|value"]]]
                                               ["|change"
                                                ["{}" ":type" ":change" ":value" ["aget" [".-target" "event"] "|value"]]]
                                               ["|focus" ["{}" ":type" ":focus"]]
                                               ["{}"
                                                ":type"
                                                [".-type" "event"]
                                                ":msg"
                                                ["str" "|Unhandled event: " [".-type" "event"]]]]
                                              ["assoc" ":original-event" "event"]]],
                               "mute-element" ["defn"
                                               "mute-element"
                                               ["element"]
                                               ["if"
                                                ["component?" "element"]
                                                ["update" "element" ":tree" "mute-element"]
                                                ["->"
                                                 "element"
                                                 ["update" ":event" ["fn" ["events"] ["list"]]]
                                                 ["update"
                                                  ":children"
                                                  ["fn"
                                                   ["children"]
                                                   ["->>"
                                                    "children"
                                                    ["map"
                                                     ["fn"
                                                      ["entry"]
                                                      ["[]" ["first" "entry"] ["mute-element" ["last" "entry"]]]]]]]]]]],
                               "purify-element" ["defn"
                                                 "purify-element"
                                                 ["markup"]
                                                 ["if"
                                                  ["nil?" "markup"]
                                                  "nil"
                                                  ["if"
                                                   ["component?" "markup"]
                                                   ["recur" [":tree" "markup"]]
                                                   ["into"
                                                    ["{}"]
                                                    ["->"
                                                     "markup"
                                                     ["update" ":event" "purify-events"]
                                                     ["update"
                                                      ":children"
                                                      ["fn"
                                                       ["children"]
                                                       ["->>"
                                                        "children"
                                                        ["map"
                                                         ["fn"
                                                          ["entry"]
                                                          ["[]" ["first" "entry"] ["purify-element" ["last" "entry"]]]]]]]]]]]]],
                               "text->html" ["defn"
                                             "text->html"
                                             ["x"]
                                             ["if"
                                              ["some?" "x"]
                                              ["->"
                                               ["str" "x"]
                                               ["string/replace" ["re-pattern" "|>"] "|&gt;"]
                                               ["string/replace" ["re-pattern" "|<"] "|&lt;"]]
                                              "nil"]]},
                        :procs []},
         "cursor" {:ns ["ns" "respo.cursor"],
                   :defs {"mutate" ["defn"
                                    "mutate"
                                    ["op-data"]
                                    ["fn"
                                     ["states"]
                                     ["let"
                                      [[["[]" "cursor" "next-state"] "op-data"]]
                                      ["assoc-in" "states" ["conj" "cursor" ":data"] "next-state"]]]]},
                   :procs []},
         "test.comp.todolist" {:ns ["ns"
                                    "respo.test.comp.todolist"
                                    [":require-macros" ["respo.macros" ":refer" ["div"]]]
                                    [":require"
                                     ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                     ["[]" "respo.test.comp.task" ":refer" ["[]" "comp-task"]]]],
                               :defs {"style-todolist" ["def"
                                                        "style-todolist"
                                                        ["{}" [":color" ":blue"] [":font-family" "|\"微软雅黑\", Verdana"]]],
                                      "comp-todolist" ["def"
                                                       "comp-todolist"
                                                       ["create-comp"
                                                        ":todolist"
                                                        ["fn"
                                                         ["tasks"]
                                                         ["fn"
                                                          ["cursor"]
                                                          ["div"
                                                           ["{}" [":style" "style-todolist"]]
                                                           ["->>"
                                                            "tasks"
                                                            ["map"
                                                             ["fn" ["task"] ["[]" [":id" "task"] ["comp-task" "task"]]]]]]]]]]},
                               :procs []},
         "app.comp.container" {:ns ["ns"
                                    "respo.app.comp.container"
                                    [":require-macros"
                                     ["[]" "respo.macros" ":refer" ["[]" "defcomp" "div" "span" "<>" "cursor->"]]]
                                    [":require"
                                     ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                     ["[]" "respo.app.comp.todolist" ":refer" ["[]" "comp-todolist"]]]],
                               :defs {"style-states" ["def" "style-states" ["{}" [":padding" "8"]]],
                                      "comp-container" ["defcomp"
                                                        "comp-container"
                                                        ["store"]
                                                        ["let"
                                                         [["state" [":states" "store"]]]
                                                         ["div"
                                                          ["{}" [":style" "style-global"]]
                                                          ["cursor->"
                                                           ":todolist"
                                                           "comp-todolist"
                                                           "state"
                                                           [":tasks" "store"]]
                                                          ["div"
                                                           ["{}" [":style" "style-states"]]
                                                           ["<>" "span" ["pr-str" [":states" "store"]] "nil"]]]]],
                                      "style-global" ["def" "style-global" ["{}" [":font-family" "|Avenir,Verdana"]]]},
                               :procs []},
         "render.patch" {:ns ["ns"
                              "respo.render.patch"
                              [":require"
                               ["[]" "clojure.string" ":as" "string"]
                               ["[]" "polyfill.core" ":refer" ["[]" "read-string*"]]
                               ["[]" "respo.util.format" ":refer" ["[]" "dashed->camel" "event->prop" "ensure-string"]]
                               ["[]" "respo.render.dom" ":refer" ["[]" "make-element" "style->string"]]]],
                         :defs {"rm-event" ["defn"
                                            "rm-event"
                                            ["target" "event-name"]
                                            ["let"
                                             [["event-prop" ["event->prop" "event-name"]]]
                                             ["aset" "target" "event-prop" "nil"]]],
                                "replace-style" ["defn"
                                                 "replace-style"
                                                 ["target" "op"]
                                                 ["let"
                                                  [["style-name" ["dashed->camel" ["name" ["key" "op"]]]]
                                                   ["style-value" ["ensure-string" ["val" "op"]]]]
                                                  ["aset" [".-style" "target"] "style-name" "style-value"]]],
                                "replace-element" ["defn"
                                                   "replace-element"
                                                   ["target" "op" "listener-builder"]
                                                   ["let"
                                                    [["new-element" ["make-element" "op" "listener-builder"]]
                                                     ["parent-element" [".-parentElement" "target"]]]
                                                    [".insertBefore" "parent-element" "new-element" "target"]
                                                    [".remove" "target"]]],
                                "append-element" ["defn"
                                                  "append-element"
                                                  ["target" "op" "listener-builder"]
                                                  ["let"
                                                   [["new-element" ["make-element" "op" "listener-builder"]]]
                                                   [".appendChild" "target" "new-element"]]],
                                "add-event" ["defn"
                                             "add-event"
                                             ["target" "op-data" "listener-builder"]
                                             ["let"
                                              [[["[]" "event-name" "coord"] "op-data"]
                                               ["event-prop" ["event->prop" "event-name"]]]
                                              ["aset"
                                               "target"
                                               "event-prop"
                                               ["fn"
                                                ["event"]
                                                [["listener-builder" "event-name"] "event" "coord"]
                                                [".stopPropagation" "event"]]]]],
                                "rm-prop" ["defn"
                                           "rm-prop"
                                           ["target" "op"]
                                           ["aset" "target" ["dashed->camel" ["name" "op"]] "nil"]],
                                "add-prop" ["defn"
                                            "add-prop"
                                            ["target" "op"]
                                            ["let"
                                             [["prop-name" ["dashed->camel" ["name" ["key" "op"]]]]
                                              ["prop-value" ["val" "op"]]]
                                             ["case"
                                              "prop-name"
                                              ["|style" ["aset" "target" "prop-name" ["style->string" "prop-value"]]]
                                              ["aset" "target" "prop-name" "prop-value"]]]],
                                "replace-prop" ["defn"
                                                "replace-prop"
                                                ["target" "op"]
                                                ["let"
                                                 [["prop-name" ["dashed->camel" ["name" ["key" "op"]]]]
                                                  ["prop-value" ["val" "op"]]]
                                                 ["if"
                                                  ["=" "prop-name" "|value"]
                                                  ["if"
                                                   ["not=" "prop-value" [".-value" "target"]]
                                                   ["aset" "target" "prop-name" "prop-value"]]
                                                  ["aset" "target" "prop-name" "prop-value"]]]],
                                "apply-dom-changes" ["defn"
                                                     "apply-dom-changes"
                                                     ["changes" "mount-point" "listener-builder"]
                                                     ["let"
                                                      [["root" [".-firstChild" "mount-point"]]]
                                                      ["doseq"
                                                       ["[]" "op" "changes"]
                                                       ["let"
                                                        [[["[]" "op-type" "coord" "op-data"] "op"]
                                                         ["target" ["find-target" "root" "coord"]]]
                                                        ["--" "println" "op-type" "target" "op-data"]
                                                        ["case"
                                                         "op-type"
                                                         [":replace-prop" ["replace-prop" "target" "op-data"]]
                                                         [":add-prop" ["add-prop" "target" "op-data"]]
                                                         [":rm-prop" ["rm-prop" "target" "op-data"]]
                                                         [":add-style" ["add-style" "target" "op-data"]]
                                                         [":replace-style" ["replace-style" "target" "op-data"]]
                                                         [":rm-style" ["rm-style" "target" "op-data"]]
                                                         [":add-event"
                                                          ["add-event" "target" "op-data" "listener-builder"]]
                                                         [":rm-event" ["rm-event" "target" "op-data"]]
                                                         [":add" ["add-element" "target" "op-data" "listener-builder"]]
                                                         [":rm" ["rm-element" "target" "op-data"]]
                                                         [":replace"
                                                          ["replace-element" "target" "op-data" "listener-builder"]]
                                                         [":append"
                                                          ["append-element" "target" "op-data" "listener-builder"]]
                                                         ["println" "|not implemented:" "op-type"]]]]]],
                                "add-style" ["defn"
                                             "add-style"
                                             ["target" "op"]
                                             ["let"
                                              [["style-name" ["dashed->camel" ["name" ["key" "op"]]]]
                                               ["style-value" ["ensure-string" ["val" "op"]]]]
                                              ["aset" [".-style" "target"] "style-name" "style-value"]]],
                                "rm-style" ["defn"
                                            "rm-style"
                                            ["target" "op"]
                                            ["let"
                                             [["style-name" ["dashed->camel" ["name" "op"]]]]
                                             ["aset" [".-style" "target"] "style-name" "nil"]]],
                                "rm-element" ["defn" "rm-element" ["target" "op"] [".remove" "target"]],
                                "find-target" ["defn"
                                               "find-target"
                                               ["root" "coord"]
                                               ["if"
                                                ["empty?" "coord"]
                                                "root"
                                                ["let"
                                                 [["index" ["first" "coord"]]
                                                  ["child" ["aget" [".-children" "root"] "index"]]]
                                                 ["recur" "child" ["rest" "coord"]]]]],
                                "add-element" ["defn"
                                               "add-element"
                                               ["target" "op" "listener-builder"]
                                               ["let"
                                                [["new-element" ["make-element" "op" "listener-builder"]]
                                                 ["parent-element" [".-parentElement" "target"]]]
                                                [".insertBefore" "parent-element" "new-element" "target"]]]},
                         :procs []},
         "app.updater.core" {:ns ["ns"
                                  "respo.app.updater.core"
                                  [":require"
                                   ["[]" "clojure.string" ":as" "string"]
                                   ["[]" "respo.cursor" ":refer" ["[]" "mutate"]]]],
                             :defs {"updater" ["defn"
                                               "updater"
                                               ["store" "op-type" "op-data" "op-id"]
                                               ["--"
                                                "println"
                                                ["pr-str" "store"]
                                                ["pr-str" "op-type"]
                                                ["pr-str" "op-data"]]
                                               ["case"
                                                "op-type"
                                                [":states" ["update" "store" ":states" ["mutate" "op-data"]]]
                                                [":add"
                                                 ["update"
                                                  "store"
                                                  ":tasks"
                                                  ["fn"
                                                   ["tasks"]
                                                   ["conj"
                                                    "tasks"
                                                    ["{}" ":text" "op-data" ":id" "op-id" ":done?" "false"]]]]]
                                                [":remove"
                                                 ["update"
                                                  "store"
                                                  ":tasks"
                                                  ["fn"
                                                   ["tasks"]
                                                   ["->>"
                                                    "tasks"
                                                    ["filterv" ["fn" ["task"] ["not" ["=" [":id" "task"] "op-data"]]]]]]]]
                                                [":clear" ["assoc" "store" ":tasks" ["[]"]]]
                                                [":update"
                                                 ["update"
                                                  "store"
                                                  ":tasks"
                                                  ["fn"
                                                   ["tasks"]
                                                   ["let"
                                                    [["task-id" [":id" "op-data"]] ["text" [":text" "op-data"]]]
                                                    ["->>"
                                                     "tasks"
                                                     ["mapv"
                                                      ["fn"
                                                       ["task"]
                                                       ["if"
                                                        ["=" [":id" "task"] "task-id"]
                                                        ["assoc" "task" ":text" "text"]
                                                        "task"]]]]]]]]
                                                [":hit-first"
                                                 ["->"
                                                  "store"
                                                  ["update-in"
                                                   ["[]" ":tasks" "0"]
                                                   ["fn" ["task"] ["assoc" "task" ":text" "op-data"]]]]]
                                                [":toggle"
                                                 ["update"
                                                  "store"
                                                  ":tasks"
                                                  ["fn"
                                                   ["tasks"]
                                                   ["let"
                                                    [["task-id" "op-data"]]
                                                    ["->>"
                                                     "tasks"
                                                     ["mapv"
                                                      ["fn"
                                                       ["task"]
                                                       ["if"
                                                        ["=" [":id" "task"] "task-id"]
                                                        ["update" "task" ":done?" "not"]
                                                        "task"]]]]]]]]
                                                "store"]]},
                             :procs []},
         "util.detect" {:ns ["ns" "respo.util.detect"],
                        :defs {"element?" ["defn" "element?" ["x"] ["and" ["map?" "x"] ["contains?" "x" ":event"]]],
                               "=seq" ["defn"
                                       "=seq"
                                       ["a" "b"]
                                       ["let"
                                        [["a-empty?" ["empty?" "a"]] ["b-empty?" ["empty?" "b"]]]
                                        ["if"
                                         ["and" "a-empty?" "b-empty?"]
                                         "true"
                                         ["if"
                                          ["or" "a-empty?" "b-empty?"]
                                          "false"
                                          ["if"
                                           ["identical?" ["first" "a"] ["first" "b"]]
                                           ["recur" ["rest" "a"] ["rest" "b"]]
                                           "false"]]]]],
                               "component?" ["defn" "component?" ["x"] ["and" ["map?" "x"] ["contains?" "x" ":tree"]]]},
                        :procs []},
         "app.comp.zero" {:ns ["ns"
                               "respo.app.comp.zero"
                               [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "div"]]]
                               [":require" ["[]" "respo.core" ":refer" ["[]" "create-comp"]]]],
                          :defs {"comp-zero" ["defcomp" "comp-zero" [] ["div" ["{}" [":inner-text" "0"]]]]},
                          :procs []},
         "render.dom" {:ns ["ns"
                            "respo.render.dom"
                            [":require"
                             ["[]" "clojure.string" ":as" "string"]
                             ["[]" "respo.util.format" ":refer" ["[]" "dashed->camel" "event->prop" "ensure-string"]]
                             ["[]" "polyfill.core" ":refer" ["[]" "document-create-element*"]]]],
                       :defs {"make-element" ["defn"
                                              "make-element"
                                              ["virtual-element" "listener-builder"]
                                              ["let"
                                               [["tag-name" ["name" [":name" "virtual-element"]]]
                                                ["attrs" [":attrs" "virtual-element"]]
                                                ["style" [":style" "virtual-element"]]
                                                ["children" [":children" "virtual-element"]]
                                                ["element" ["document-create-element*" "tag-name"]]
                                                ["child-elements"
                                                 ["->>"
                                                  "children"
                                                  ["map"
                                                   ["fn" ["entry"] ["make-element" ["last" "entry"] "listener-builder"]]]]]]
                                               ["doseq"
                                                ["[]" "entry" "attrs"]
                                                ["let"
                                                 [["k" ["dashed->camel" ["name" ["first" "entry"]]]]
                                                  ["v" ["last" "entry"]]]
                                                 ["aset" "element" "k" "v"]]]
                                               ["doseq"
                                                ["[]" "entry" "style"]
                                                ["let"
                                                 [["k" ["dashed->camel" ["name" ["first" "entry"]]]]
                                                  ["v" ["last" "entry"]]]
                                                 ["aset"
                                                  ["aget" "element" "|style"]
                                                  "k"
                                                  ["if" ["keyword?" "v"] ["name" "v"] "v"]]]]
                                               ["doseq"
                                                ["[]" "event-name" [":event" "virtual-element"]]
                                                ["let"
                                                 [["name-in-string" ["event->prop" "event-name"]]]
                                                 ["--" "println" "|listener:" "event-name" "name-in-string"]
                                                 ["aset"
                                                  "element"
                                                  "name-in-string"
                                                  ["fn"
                                                   ["event"]
                                                   [["listener-builder" "event-name"]
                                                    "event"
                                                    [":coord" "virtual-element"]]
                                                   [".stopPropagation" "event"]]]]]
                                               ["doseq"
                                                ["[]" "child-element" "child-elements"]
                                                [".appendChild" "element" "child-element"]]
                                               "element"]],
                              "style->string" ["defn"
                                               "style->string"
                                               ["styles"]
                                               ["->>"
                                                "styles"
                                                ["map"
                                                 ["fn"
                                                  ["entry"]
                                                  ["let"
                                                   [["k" ["first" "entry"]] ["v" ["ensure-string" ["last" "entry"]]]]
                                                   ["str" ["name" "k"] "|:" "v" "|;"]]]]
                                                ["string/join" "|"]]]},
                       :procs []},
         "app.style.widget" {:ns ["ns" "respo.app.style.widget" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]]]],
                             :defs {"input" ["def"
                                             "input"
                                             ["{}"
                                              [":font-size" "|16px"]
                                              [":line-height" "|24px"]
                                              [":padding" "|0px 8px"]
                                              [":outline" ":none"]
                                              [":min-width" "|300px"]
                                              [":background-color" ["hsl" "0" "0" "94"]]
                                              [":border" ":none"]]],
                                    "button" ["def"
                                              "button"
                                              ["{}"
                                               [":display" ":inline-block"]
                                               [":padding" "|0 6px 0 6px"]
                                               [":font-family" "|Avenir,Verdana"]
                                               [":cursor" ":pointer"]
                                               [":background-color" ["hsl" "0" "80" "70"]]
                                               [":color" ["hsl" "0" "0" "100"]]
                                               [":height" "28"]
                                               [":line-height" "|28px"]]]},
                             :procs []},
         "test.comp.page" {:ns ["ns"
                                "respo.test.comp.page"
                                [":require-macros"
                                 ["respo.macros" ":refer" ["div" "html" "head" "body" "meta'" "link" "script" "style"]]]
                                [":require" ["[]" "respo.core" ":refer" ["[]" "create-comp"]]]],
                           :defs {"comp-page" ["def"
                                               "comp-page"
                                               ["create-comp" ":page" ["fn" ["store"] ["fn" ["cursor"] ["div" ["{}"]]]]]]},
                           :procs []},
         "controller.client" {:ns ["ns"
                                   "respo.controller.client"
                                   [":require"
                                    ["[]" "respo.render.patch" ":refer" ["[]" "apply-dom-changes"]]
                                    ["[]" "polyfill.core" ":refer" ["[]" "read-string*"]]
                                    ["[]" "respo.util.format" ":refer" ["[]" "event->string" "event->edn"]]
                                    ["[]" "respo.render.dom" ":refer" ["[]" "make-element"]]]],
                              :defs {"build-listener" ["defn"
                                                       "build-listener"
                                                       ["event-name" "deliver-event"]
                                                       ["fn"
                                                        ["event" "coord"]
                                                        ["let"
                                                         [["simple-event" ["event->edn" "event"]]]
                                                         ["deliver-event" "coord" "event-name" "simple-event"]]]],
                                     "patch-instance!" ["defn"
                                                        "patch-instance!"
                                                        ["changes" "mount-point" "deliver-event"]
                                                        ["let"
                                                         [["listener-builder"
                                                           ["fn"
                                                            ["event-name"]
                                                            ["build-listener" "event-name" "deliver-event"]]]]
                                                         ["apply-dom-changes"
                                                          "changes"
                                                          "mount-point"
                                                          "listener-builder"]]],
                                     "activate-instance!" ["defn"
                                                           "activate-instance!"
                                                           ["entire-dom" "mount-point" "deliver-event"]
                                                           ["let"
                                                            [["listener-builder"
                                                              ["fn"
                                                               ["event-name"]
                                                               ["build-listener" "event-name" "deliver-event"]]]]
                                                            ["set!" [".-innerHTML" "mount-point"] "|"]
                                                            [".appendChild"
                                                             "mount-point"
                                                             ["make-element" "entire-dom" "listener-builder"]]]]},
                              :procs []},
         "core" {:ns ["ns"
                      "respo.core"
                      [":require"
                       ["[]" "respo.env" ":refer" ["[]" "element-type"]]
                       ["[]" "respo.render.expand" ":refer" ["[]" "render-app"]]
                       ["[]" "respo.controller.resolve" ":refer" ["[]" "build-deliver-event"]]
                       ["[]" "respo.render.diff" ":refer" ["[]" "find-element-diffs"]]
                       ["[]" "respo.util.format" ":refer" ["[]" "purify-element" "mute-element"]]
                       ["[]" "respo.controller.client" ":refer" ["[]" "activate-instance!" "patch-instance!"]]
                       ["[]" "respo.util.list" ":refer" ["[]" "pick-attrs" "arrange-children"]]
                       ["[]" "respo.util.detect" ":refer" ["[]" "component?"]]]],
                 :defs {"*changes-logger" ["defonce" "*changes-logger" ["atom" "nil"]],
                        "create-element" ["defn"
                                          "create-element"
                                          ["tag-name" "props" "&" "children"]
                                          ["let"
                                           [["attrs" ["pick-attrs" "props"]]
                                            ["styles"
                                             ["if"
                                              ["contains?" "props" ":style"]
                                              ["sort-by" "first" [":style" "props"]]
                                              ["list"]]]
                                            ["event" ["or" [":on" "props"] [":event" "props"] ["{}"]]]
                                            ["children" ["arrange-children" "children"]]]
                                           ["{}"
                                            [":name" "tag-name"]
                                            [":coord" "nil"]
                                            [":attrs" "attrs"]
                                            [":style" "styles"]
                                            [":event" "event"]
                                            [":children" "children"]]]],
                        "render!" ["defn"
                                   "render!"
                                   ["target" "markup" "dispatch!"]
                                   ["if"
                                    ["some?" "@*global-element"]
                                    ["rerender-app!" "target" "markup" "dispatch!"]
                                    ["mount-app!" "target" "markup" "dispatch!"]]],
                        "render-element" ["defn" "render-element" ["markup"] ["render-app" "markup" "@*dom-element"]],
                        "mount-app!" ["defn"
                                      "mount-app!"
                                      ["target" "markup" "dispatch!"]
                                      ["assert"
                                       ["instance?" "element-type" "target"]
                                       "|1st argument should be an element"]
                                      ["assert" ["component?" "markup"] "|2nd argument should be a component"]
                                      ["let"
                                       [["element" ["render-element" "markup"]]
                                        ["deliver-event" ["build-deliver-event" "*global-element" "dispatch!"]]]
                                       ["--" "println" "|mount app"]
                                       ["activate-instance!" ["purify-element" "element"] "target" "deliver-event"]
                                       ["reset!" "*global-element" "element"]
                                       ["reset!" "*dom-element" "element"]]],
                        "create-comp" ["defn"
                                       "create-comp"
                                       ["comp-name" "render"]
                                       ["--" "println" "|create component:" "comp-name"]
                                       ["let"
                                        [["initial-comp"
                                          ["{}"
                                           [":name" "comp-name"]
                                           [":coord" "nil"]
                                           [":args" ["[]"]]
                                           [":render" "render"]
                                           [":tree" "nil"]
                                           [":cost" "nil"]
                                           [":cursor" "nil"]]]]
                                        ["fn" ["&" "args"] ["assoc" "initial-comp" ":args" "args"]]]],
                        "realize-ssr!" ["defn"
                                        "realize-ssr!"
                                        ["target" "markup" "dispatch!"]
                                        ["assert"
                                         ["instance?" "element-type" "target"]
                                         "|1st argument should be an element"]
                                        ["assert" ["component?" "markup"] "|2nd argument should be a component"]
                                        ["let"
                                         [["element" ["render-element" "markup"]]]
                                         ["reset!" "*global-element" ["mute-element" "element"]]
                                         ["reset!" "*dom-element" "element"]]],
                        "*dom-element" ["defonce" "*dom-element" ["atom" "nil"]],
                        "rerender-app!" ["defn"
                                         "rerender-app!"
                                         ["target" "markup" "dispatch!"]
                                         ["let"
                                          [["element" ["render-element" "markup"]]
                                           ["deliver-event" ["build-deliver-event" "*global-element" "dispatch!"]]
                                           ["*changes" ["atom" ["[]"]]]
                                           ["collect!" ["fn" ["x"] ["swap!" "*changes" "conj" "x"]]]]
                                          ["--" "println" "@*global-element"]
                                          ["--"
                                           "println"
                                           "|Changes:"
                                           ["pr-str" ["mapv" ["partial" "take" "2"] "@*changes"]]]
                                          ["find-element-diffs" "collect!" ["[]"] "@*global-element" "element"]
                                          ["let"
                                           [["logger" "@*changes-logger"]]
                                           ["if" ["some?" "logger"] ["logger" "@*global-element" "element" "@*changes"]]]
                                          ["patch-instance!" "@*changes" "target" "deliver-event"]
                                          ["reset!" "*global-element" "element"]
                                          ["reset!" "*dom-element" "element"]]],
                        "*global-element" ["defonce" "*global-element" ["atom" "nil"]],
                        "clear-cache!" ["defn" "clear-cache!" [] ["reset!" "*dom-element" "nil"]]},
                 :procs []}},
 :extension ".cljc"}
