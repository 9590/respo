{:package "respo",
 :files {"comp.zero" {:ns ["ns"
                           "respo.comp.zero"
                           [":require" ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]]],
                      :defs {"component-zero" ["def"
                                               "component-zero"
                                               ["create-comp"
                                                ":zero"
                                                ["fn"
                                                 []
                                                 ["fn"
                                                  ["state" "mutate"]
                                                  ["div" ["{}" ":attrs" ["{}" ":inner-text" "0"]]]]]]]},
                      :procs []},
         "render.differ" {:ns ["ns"
                               "respo.render.differ"
                               [":require"
                                ["[]" "clojure.string" ":as" "string"]
                                ["[]" "respo.util.format" ":refer" ["[]" "purify-element"]]
                                ["[]" "respo.util.detect" ":refer" ["[]" "component?"]]
                                ["[]" "clojure.set" ":refer" ["[]" "difference"]]]],
                          :defs {"find-element-diffs" ["defn"
                                                       "find-element-diffs"
                                                       ["collect!" "n-coord" "old-tree" "new-tree"]
                                                       ["--"
                                                        ".log"
                                                        "js/console"
                                                        "|element diffing:"
                                                        "n-coord"
                                                        "old-tree"
                                                        "new-tree"]
                                                       ["if"
                                                        ["identical?" "old-tree" "new-tree"]
                                                        "nil"
                                                        ["cond"
                                                         [["component?" "old-tree"]
                                                          ["recur"
                                                           "collect!"
                                                           "n-coord"
                                                           ["get" "old-tree" ":tree"]
                                                           "new-tree"]]
                                                         [["component?" "new-tree"]
                                                          ["recur"
                                                           "collect!"
                                                           "n-coord"
                                                           "old-tree"
                                                           ["get" "new-tree" ":tree"]]]
                                                         [":else"
                                                          ["let"
                                                           [["old-children" [":children" "old-tree"]]
                                                            ["new-children" [":children" "new-tree"]]]
                                                           ["if"
                                                            ["or"
                                                             ["not=" [":coord" "old-tree"] [":coord" "new-tree"]]
                                                             ["not=" [":name" "old-tree"] [":name" "new-tree"]]
                                                             ["not=" [":c-name" "old-tree"] [":c-name" "new-tree"]]]
                                                            ["do"
                                                             ["collect!"
                                                              ["[]" ":replace" "n-coord" ["purify-element" "new-tree"]]]
                                                             "nil"]
                                                            ["do"
                                                             ["find-props-diffs"
                                                              "collect!"
                                                              "n-coord"
                                                              [":attrs" "old-tree"]
                                                              [":attrs" "new-tree"]]
                                                             ["let"
                                                              [["old-style" [":style" "old-tree"]]
                                                               ["new-style" [":style" "new-tree"]]]
                                                              ["if"
                                                               ["not" ["identical?" "old-style" "new-style"]]
                                                               ["find-style-diffs"
                                                                "collect!"
                                                                "n-coord"
                                                                "old-style"
                                                                "new-style"]]]
                                                             ["let"
                                                              [["old-events"
                                                                ["into" ["#{}"] ["keys" [":event" "old-tree"]]]]
                                                               ["new-events"
                                                                ["into" ["#{}"] ["keys" [":event" "new-tree"]]]]
                                                               ["added-events" ["difference" "new-events" "old-events"]]
                                                               ["removed-events"
                                                                ["difference" "old-events" "new-events"]]]
                                                              ["doall"
                                                               ["map"
                                                                ["fn"
                                                                 ["event-name"]
                                                                 ["collect!"
                                                                  ["[]"
                                                                   ":add-event"
                                                                   "n-coord"
                                                                   ["[]" "event-name" [":coord" "new-tree"]]]]]
                                                                "added-events"]]
                                                              ["doall"
                                                               ["map"
                                                                ["fn"
                                                                 ["event-name"]
                                                                 ["collect!" ["[]" ":rm-event" "n-coord" "event-name"]]]
                                                                "removed-events"]]]
                                                             ["find-children-diffs"
                                                              "collect!"
                                                              "n-coord"
                                                              "0"
                                                              "old-children"
                                                              "new-children"]]]]]]]],
                                 "find-children-diffs" ["defn"
                                                        "find-children-diffs"
                                                        ["collect!" "n-coord" "index" "old-children" "new-children"]
                                                        ["--"
                                                         ".log"
                                                         "js/console"
                                                         "|diff children:"
                                                         "n-coord"
                                                         "index"
                                                         "old-children"
                                                         "new-children"]
                                                        ["let"
                                                         [["was-empty?" ["empty?" "old-children"]]
                                                          ["now-empty?" ["empty?" "new-children"]]]
                                                         ["cond"
                                                          [["and" "was-empty?" "now-empty?"] "nil"]
                                                          [["and" "was-empty?" ["not" "now-empty?"]]
                                                           ["let"
                                                            [["element" ["last" ["first" "new-children"]]]]
                                                            ["collect!"
                                                             ["[]" ":append" "n-coord" ["purify-element" "element"]]]
                                                            ["recur"
                                                             "collect!"
                                                             "n-coord"
                                                             ["inc" "index"]
                                                             ["[]"]
                                                             ["rest" "new-children"]]]]
                                                          [["and" ["not" "was-empty?"] "now-empty?"]
                                                           ["do"
                                                            ["collect!" ["[]" ":rm" ["conj" "n-coord" "index"]]]
                                                            ["recur"
                                                             "collect!"
                                                             "n-coord"
                                                             "index"
                                                             ["rest" "old-children"]
                                                             ["[]"]]]]
                                                          [":else"
                                                           ["let"
                                                            [["old-keys" ["map" "first" ["take" "32" "old-children"]]]
                                                             ["new-keys" ["map" "first" ["take" "32" "new-children"]]]
                                                             ["x1" ["first" "old-keys"]]
                                                             ["y1" ["first" "new-keys"]]
                                                             ["x1-remains?"
                                                              ["some" ["fn" ["x"] ["=" "x" "x1"]] "new-keys"]]
                                                             ["y1-existed?"
                                                              ["some" ["fn" ["x"] ["=" "x" "y1"]] "old-keys"]]
                                                             ["old-follows" ["rest" "old-children"]]
                                                             ["new-follows" ["rest" "new-children"]]]
                                                            ["--"
                                                             "println"
                                                             "|compare:"
                                                             "x1"
                                                             "new-keys"
                                                             "x1-remains?"
                                                             "y1"
                                                             "y1-existed?"
                                                             "old-keys"]
                                                            ["cond"
                                                             [["=" "x1" "y1"]
                                                              ["let"
                                                               [["old-element" ["last" ["first" "old-children"]]]
                                                                ["new-element" ["last" ["first" "new-children"]]]]
                                                               ["find-element-diffs"
                                                                "collect!"
                                                                ["conj" "n-coord" "index"]
                                                                "old-element"
                                                                "new-element"]
                                                               ["recur"
                                                                "collect!"
                                                                "n-coord"
                                                                ["inc" "index"]
                                                                "old-follows"
                                                                "new-follows"]]]
                                                             [["and" "x1-remains?" ["not" "y1-existed?"]]
                                                              ["do"
                                                               ["collect!"
                                                                ["let"
                                                                 [["element" ["last" ["first" "new-children"]]]]
                                                                 ["[]"
                                                                  ":add"
                                                                  ["conj" "n-coord" "index"]
                                                                  ["purify-element" "element"]]]]
                                                               ["recur"
                                                                "collect!"
                                                                "n-coord"
                                                                ["inc" "index"]
                                                                "old-children"
                                                                "new-follows"]]]
                                                             [["and" ["not" "x1-remains?"] "y1-existed?"]
                                                              ["do"
                                                               ["collect!" ["[]" ":rm" ["conj" "n-coord" "index"]]]
                                                               ["recur"
                                                                "collect!"
                                                                "n-coord"
                                                                "index"
                                                                "old-follows"
                                                                "new-children"]]]
                                                             [":else"
                                                              ["let"
                                                               [["xi" [".indexOf" "new-keys" "x1"]]
                                                                ["yi" [".indexOf" "old-keys" "y1"]]
                                                                ["first-old-entry" ["first" "old-children"]]
                                                                ["first-new-entry" ["first" "new-children"]]]
                                                               ["--" "println" "|index:" "xi" "yi"]
                                                               ["if"
                                                                ["<=" "xi" "yi"]
                                                                ["let"
                                                                 [["new-element" ["last" ["first" "new-children"]]]]
                                                                 ["collect!"
                                                                  ["[]"
                                                                   ":add"
                                                                   ["conj" "n-coord" "index"]
                                                                   ["purify-element" "new-element"]]]
                                                                 ["recur"
                                                                  "collect!"
                                                                  "n-coord"
                                                                  ["inc" "index"]
                                                                  "old-children"
                                                                  "new-follows"]]
                                                                ["do"
                                                                 ["collect!" ["[]" ":rm" ["conj" "n-coord" "index"]]]
                                                                 ["recur"
                                                                  "collect!"
                                                                  "n-coord"
                                                                  "index"
                                                                  "old-follows"
                                                                  "new-children"]]]]]]]]]]],
                                 "find-style-diffs" ["defn"
                                                     "find-style-diffs"
                                                     ["collect!" "coord" "old-style" "new-style"]
                                                     ["let"
                                                      [["was-empty?" ["empty?" "old-style"]]
                                                       ["now-empty?" ["empty?" "new-style"]]]
                                                      ["if"
                                                       ["identical?" "old-style" "new-style"]
                                                       "nil"
                                                       ["cond"
                                                        [["and" "was-empty?" "now-empty?"] "nil"]
                                                        [["and" "was-empty?" ["not" "now-empty?"]]
                                                         ["let"
                                                          [["entry" ["first" "new-style"]]
                                                           ["follows" ["rest" "new-style"]]]
                                                          ["collect!" ["[]" ":add-style" "coord" "entry"]]
                                                          ["recur" "collect!" "coord" "old-style" "follows"]]]
                                                        [["and" ["not" "was-empty?"] "now-empty?"]
                                                         ["let"
                                                          [["entry" ["first" "old-style"]]
                                                           ["follows" ["rest" "old-style"]]]
                                                          ["collect!" ["[]" ":rm-style" "coord" ["key" "entry"]]]
                                                          ["recur" "collect!" "coord" "follows" "new-style"]]]
                                                        [":else"
                                                         ["let"
                                                          [["old-entry" ["first" "old-style"]]
                                                           ["new-entry" ["first" "new-style"]]
                                                           ["old-follows" ["rest" "old-style"]]
                                                           ["new-follows" ["rest" "new-style"]]]
                                                          ["case"
                                                           ["compare" ["key" "old-entry"] ["key" "new-entry"]]
                                                           ["-1"
                                                            ["do"
                                                             ["collect!" ["[]" ":rm-style" "coord" ["key" "old-entry"]]]
                                                             ["recur" "collect!" "coord" "old-follows" "new-style"]]]
                                                           ["1"
                                                            ["do"
                                                             ["collect!" ["[]" ":add-style" "coord" "new-entry"]]
                                                             ["recur" "collect!" "coord" "old-style" "new-follows"]]]
                                                           ["do"
                                                            ["if"
                                                             ["not"
                                                              ["identical?" ["val" "old-entry"] ["val" "new-entry"]]]
                                                             ["collect!" ["[]" ":replace-style" "coord" "new-entry"]]]
                                                            ["recur" "collect!" "coord" "old-follows" "new-follows"]]]]]]]]],
                                 "find-props-diffs" ["defn"
                                                     "find-props-diffs"
                                                     ["collect!" "coord" "old-props" "new-props"]
                                                     ["--"
                                                      ".log"
                                                      "js/console"
                                                      "|find props:"
                                                      "coord"
                                                      "old-props"
                                                      "new-props"
                                                      ["count" "old-props"]
                                                      ["count" "new-props"]]
                                                     ["let"
                                                      [["was-empty?" ["empty?" "old-props"]]
                                                       ["now-empty?" ["empty?" "new-props"]]]
                                                      ["cond"
                                                       [["and" "was-empty?" "now-empty?"] "nil"]
                                                       [["and" "was-empty?" ["not" "now-empty?"]]
                                                        ["do"
                                                         ["collect!" ["[]" ":add-prop" "coord" ["first" "new-props"]]]
                                                         ["recur" "collect!" "coord" "old-props" ["rest" "new-props"]]]]
                                                       [["and" ["not" "was-empty?"] "now-empty?"]
                                                        ["do"
                                                         ["collect!"
                                                          ["[]" ":rm-prop" "coord" ["key" ["first" "old-props"]]]]
                                                         ["recur" "collect!" "coord" ["rest" "old-props"] "new-props"]]]
                                                       [":else"
                                                        ["let"
                                                         [["old-entry" ["first" "old-props"]]
                                                          ["new-entry" ["first" "new-props"]]
                                                          [["[]" "old-k" "old-v"] ["first" "old-props"]]
                                                          [["[]" "new-k" "new-v"] ["first" "new-props"]]
                                                          ["old-follows" ["rest" "old-props"]]
                                                          ["new-follows" ["rest" "new-props"]]]
                                                         ["--" ".log" "js/console" "old-k" "new-k" "old-v" "new-v"]
                                                         ["case"
                                                          ["compare" "old-k" "new-k"]
                                                          ["-1"
                                                           ["do"
                                                            ["collect!" ["[]" ":rm-prop" "coord" "old-k"]]
                                                            ["recur" "collect!" "coord" "old-follows" "new-props"]]]
                                                          ["1"
                                                           ["do"
                                                            ["collect!" ["[]" ":add-prop" "coord" "new-entry"]]
                                                            ["recur" "collect!" "coord" "old-props" "new-follows"]]]
                                                          ["do"
                                                           ["if"
                                                            ["not=" "old-v" "new-v"]
                                                            ["collect!" ["[]" ":replace-prop" "coord" "new-entry"]]]
                                                           ["recur" "collect!" "coord" "old-follows" "new-follows"]]]]]]]]},
                          :procs []},
         "comp.debug" {:ns ["ns"
                            "respo.comp.debug"
                            [":require"
                             ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                             ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]]],
                       :defs {"comp-debug" ["def"
                                            "comp-debug"
                                            ["create-comp"
                                             ":debug"
                                             ["fn"
                                              ["data" "more-style"]
                                              ["fn"
                                               ["cursor"]
                                               ["div"
                                                ["{}" ":style" ["merge" "default-style" "more-style"]]
                                                ["span" ["{}" ":attrs" ["{}" ":inner-text" ["pr-str" "data"]]]]]]]]],
                              "default-style" ["def"
                                               "default-style"
                                               ["{}"
                                                [":position" ":absolute"]
                                                [":background-color" ["hsl" "0" "0" "0"]]
                                                [":color" ":white"]
                                                [":opacity" "0.4"]
                                                [":font-size" "|10px"]
                                                [":font-family" "|Menlo"]
                                                [":box-shadow" ["str" "|0 0 1px " ["hsl" "0" "0" "0" "0.8"]]]
                                                [":line-height" "1.6"]
                                                [":padding" "|2px 4px"]
                                                [":pointer-events" ":none"]]]},
                       :procs []},
         "render.expander" {:ns ["ns"
                                 "respo.render.expander"
                                 [":require"
                                  ["[]" "clojure.string" ":as" "string"]
                                  ["[]" "polyfill.core" ":refer" ["[]" "io-get-time*"]]
                                  ["[]" "respo.util.format" ":refer" ["[]" "purify-element"]]
                                  ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?" "=seq"]]
                                  ["[]" "respo.util.list" ":refer" ["[]" "filter-first"]]]],
                            :defs {"render-component" ["defn"
                                                       "render-component"
                                                       ["markup" "coord" "cursor" "old-element"]
                                                       ["if"
                                                        ["and"
                                                         ["some?" "old-element"]
                                                         ["=seq" [":args" "markup"] [":args" "old-element"]]
                                                         ["identical?" [":render" "markup"] [":render" "old-element"]]]
                                                        ["do" ["--" "println" "|not changed" "coord"] "old-element"]
                                                        ["let"
                                                         [["begin-time" ["io-get-time*"]]
                                                          ["args" [":args" "markup"]]
                                                          ["component" ["first" "markup"]]
                                                          ["new-coord" ["conj" "coord" [":name" "markup"]]]
                                                          ["render" [":render" "markup"]]
                                                          ["markup-tree" ["apply" "render" "args"]]
                                                          ["tree"
                                                           ["render-markup"
                                                            "markup-tree"
                                                            "new-coord"
                                                            "new-coord"
                                                            "cursor"
                                                            [":tree" "old-element"]]]
                                                          ["cost" ["-" ["io-get-time*"] "begin-time"]]]
                                                         ["--" "println" "|markup tree:" ["pr-str" "markup-tree"]]
                                                         ["--" "println" "|no cache:" "coord"]
                                                         ["assoc"
                                                          "markup"
                                                          ":coord"
                                                          "coord"
                                                          ":tree"
                                                          "tree"
                                                          ":cost"
                                                          "cost"]]]],
                                   "render-app" ["defn"
                                                 "render-app"
                                                 ["markup" "old-element"]
                                                 ["render-markup" "markup" ["[]"] ["[]"] ["[]"] "old-element"]],
                                   "render-children" ["defn"
                                                      "render-children"
                                                      ["children" "coord" "comp-coord" "cursor" "old-children"]
                                                      ["--" "println" "|render children:" "children"]
                                                      ["let"
                                                       [["mapped-cache" ["into" ["{}"] "old-children"]]]
                                                       ["->>"
                                                        "children"
                                                        ["map"
                                                         ["fn"
                                                          ["child-entry"]
                                                          ["let"
                                                           [["k" ["first" "child-entry"]]
                                                            ["child-element" ["last" "child-entry"]]
                                                            ["old-child" ["get" "mapped-cache" "k"]]]
                                                           ["--"
                                                            "if"
                                                            ["nil?" "old-child"]
                                                            ["do"
                                                             ["println" "|old child:" "coord" ["some?" "old-child"]]]]
                                                           ["[]"
                                                            "k"
                                                            ["if"
                                                             ["some?" "child-element"]
                                                             ["render-markup"
                                                              "child-element"
                                                              ["conj" "coord" "k"]
                                                              "comp-coord"
                                                              "cursor"
                                                              "old-child"]
                                                             "nil"]]]]]]]],
                                   "render-element" ["defn"
                                                     "render-element"
                                                     ["markup" "coord" "comp-coord" "cursor" "old-element"]
                                                     ["let"
                                                      [["children" [":children" "markup"]]
                                                       ["child-elements"
                                                        ["render-children"
                                                         "children"
                                                         "coord"
                                                         "comp-coord"
                                                         "cursor"
                                                         [":children" "old-element"]]]]
                                                      ["--"
                                                       ".log"
                                                       "js/console"
                                                       "|children should have order:"
                                                       ["pr-str" "children"]
                                                       ["pr-str" "child-elements"]
                                                       ["pr-str" "markup"]]
                                                      ["assoc" "markup" ":coord" "coord" ":children" "child-elements"]]],
                                   "render-markup" ["defn"
                                                    "render-markup"
                                                    ["markup" "coord" "component-coord" "cursor" "old-element"]
                                                    ["if"
                                                     ["component?" "markup"]
                                                     ["render-component" "markup" "coord" "cursor" "old-element"]
                                                     ["render-element"
                                                      "markup"
                                                      "coord"
                                                      "component-coord"
                                                      "cursor"
                                                      "old-element"]]]},
                            :procs []},
         "render.html" {:ns ["ns"
                             "respo.render.html"
                             [":require"
                              ["[]" "clojure.string" ":as" "string"]
                              ["[]"
                               "respo.util.format"
                               ":refer"
                               ["[]" "prop->attr" "purify-element" "mute-element" "ensure-string" "text->html"]]
                              ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?"]]
                              ["[]" "respo.render.expander" ":refer" ["[]" "render-app"]]]],
                        :defs {"global-element" ["def" "global-element" ["atom" "nil"]],
                               "element->html" ["defn"
                                                "element->html"
                                                ["element"]
                                                ["let"
                                                 [["tag-name" ["name" [":name" "element"]]]
                                                  ["attrs" ["into" ["{}"] [":attrs" "element"]]]
                                                  ["text-inside"
                                                   ["or" [":innerHTML" "attrs"] ["text->html" [":inner-text" "attrs"]]]]
                                                  ["tailored-props"
                                                   ["->" "attrs" ["dissoc" ":innerHTML"] ["dissoc" ":inner-text"]]]
                                                  ["props-in-string" ["props->string" "tailored-props"]]
                                                  ["children"
                                                   ["->>"
                                                    [":children" "element"]
                                                    ["map"
                                                     ["fn"
                                                      ["entry"]
                                                      ["let" [["child" ["last" "entry"]]] ["element->html" "child"]]]]]]]
                                                 ["str"
                                                  "|<"
                                                  "tag-name"
                                                  ["if" [">" ["count" "props-in-string"] "0"] "| " "|"]
                                                  "props-in-string"
                                                  "|>"
                                                  ["or" "text-inside" ["string/join" "|" "children"]]
                                                  "|</"
                                                  "tag-name"
                                                  "|>"]]],
                               "make-html" ["defn"
                                            "make-html"
                                            ["tree"]
                                            ["let"
                                             [["element" ["render-app" "tree" "nil"]]]
                                             ["element->html" ["purify-element" ["mute-element" "element"]]]]],
                               "style->string" ["defn"
                                                "style->string"
                                                ["styles"]
                                                ["string/join"
                                                 "|"
                                                 ["->>"
                                                  "styles"
                                                  ["map"
                                                   ["fn"
                                                    ["entry"]
                                                    ["let"
                                                     [["k" ["first" "entry"]] ["v" ["last" "entry"]]]
                                                     ["str"
                                                      ["name" "k"]
                                                      "|:"
                                                      ["if" ["string?" "v"] ["escape-html" "v"] ["ensure-string" "v"]]
                                                      "|;"]]]]]]],
                               "element->string" ["defn"
                                                  "element->string"
                                                  ["element"]
                                                  ["let"
                                                   [["tag-name" ["name" [":name" "element"]]]
                                                    ["attrs" ["into" ["{}"] [":attrs" "element"]]]
                                                    ["styles" ["or" [":style" "element"] ["{}"]]]
                                                    ["text-inside"
                                                     ["or"
                                                      [":innerHTML" "attrs"]
                                                      ["text->html" [":inner-text" "attrs"]]]]
                                                    ["formatted-coord" ["pr-str" [":coord" "element"]]]
                                                    ["formatted-event"
                                                     ["pr-str" ["into" ["#{}"] ["keys" [":event" "element"]]]]]
                                                    ["tailored-props"
                                                     ["->"
                                                      "attrs"
                                                      ["dissoc" ":innerHTML"]
                                                      ["dissoc" ":inner-text"]
                                                      [["fn"
                                                        ["props"]
                                                        ["if"
                                                         [">" ["count" "styles"] "0"]
                                                         ["assoc" "props" ":style" "styles"]
                                                         "props"]]]]]
                                                    ["props-in-string" ["props->string" "tailored-props"]]
                                                    ["children"
                                                     ["->>"
                                                      [":children" "element"]
                                                      ["map"
                                                       ["fn"
                                                        ["entry"]
                                                        ["let" [["child" ["last" "entry"]]] ["element->string" "child"]]]]]]]
                                                   ["str"
                                                    "|<"
                                                    "tag-name"
                                                    ["if" [">" ["count" "props-in-string"] "0"] "| " "|"]
                                                    "props-in-string"
                                                    "|>"
                                                    ["or" "text-inside" ["string/join" "|" "children"]]
                                                    "|</"
                                                    "tag-name"
                                                    "|>"]]],
                               "make-string" ["defn"
                                              "make-string"
                                              ["tree"]
                                              ["let"
                                               [["element" ["render-app" "tree" "nil"]]]
                                               ["element->string" ["purify-element" ["mute-element" "element"]]]]],
                               "props->string" ["defn"
                                                "props->string"
                                                ["props"]
                                                ["->>"
                                                 "props"
                                                 ["filter"
                                                  ["fn"
                                                   ["entry"]
                                                   ["let"
                                                    [["k" ["first" "entry"]]]
                                                    ["not" ["re-matches" ["re-pattern" "|^:on-.+"] ["str" "k"]]]]]]
                                                 ["map" "entry->string"]
                                                 ["string/join" "| "]]],
                               "escape-html" ["defn"
                                              "escape-html"
                                              ["text"]
                                              ["->" "text" ["string/replace" ["re-pattern" "|\""] "|&quot;"]]],
                               "entry->string" ["defn"
                                                "entry->string"
                                                ["entry"]
                                                ["let"
                                                 [["k" ["first" "entry"]] ["v" ["last" "entry"]]]
                                                 ["str"
                                                  ["prop->attr" ["name" "k"]]
                                                  "|="
                                                  ["pr-str" ["if" ["=" "k" ":style"] ["style->string" "v"] "v"]]]]]},
                        :procs []},
         "util.comparator" {:ns ["ns"
                                 "respo.util.comparator"
                                 [":require" ["[]" "polyfill.core" ":refer" ["[]" "raise*"]]]],
                            :defs {"type-as-int" ["defn"
                                                  "type-as-int"
                                                  ["x"]
                                                  ["cond"
                                                   [["number?" "x"] "0"]
                                                   [["keyword?" "x"] "1"]
                                                   [["string?" "x"] "2"]
                                                   [":else" ["raise*" "|use number, keyword or string in coord!"]]]],
                                   "compare-more" ["defn"
                                                   "compare-more"
                                                   ["x" "y"]
                                                   ["let"
                                                    [["type-x" ["type-as-int" "x"]] ["type-y" ["type-as-int" "y"]]]
                                                    ["if"
                                                     ["=" "type-x" "type-y"]
                                                     ["compare" "x" "y"]
                                                     ["compare" "type-x" "type-y"]]]]},
                            :procs []},
         "comp.wrap" {:ns ["ns"
                           "respo.comp.wrap"
                           [":require"
                            ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]
                            ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]]],
                      :defs {"comp-wrap" ["def"
                                          "comp-wrap"
                                          ["create-comp"
                                           ":wrap"
                                           ["fn" [] ["fn" ["cursor"] ["comp-text" "|pure component component" "nil"]]]]]},
                      :procs []},
         "comp.task" {:ns ["ns"
                           "respo.comp.task"
                           [":require"
                            ["[]" "clojure.string" ":as" "string"]
                            ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                            ["[]" "respo.alias" ":refer" ["[]" "div" "input" "span" "create-comp" "button"]]
                            ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                            ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                            ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                            ["[]" "respo.style.widget" ":as" "widget"]]],
                      :defs {"style-task" ["def" "style-task" ["{}" [":display" ":flex"] [":padding" "|4px 0px"]]],
                             "on-click" ["defn"
                                         "on-click"
                                         ["props" "state"]
                                         ["fn" ["event" "dispatch!"] ["println" "|clicked."]]],
                             "handle-done" ["defn"
                                            "handle-done"
                                            ["task-id"]
                                            ["fn" ["e" "dispatch!"] ["dispatch!" ":toggle" "task-id"]]],
                             "style-done" ["def"
                                           "style-done"
                                           ["{}"
                                            [":width" "32"]
                                            [":height" "32"]
                                            [":outline" ":none"]
                                            [":border" ":none"]
                                            [":vertical-align" ":middle"]]],
                             "comp-task" ["def"
                                          "comp-task"
                                          ["create-comp"
                                           ":task"
                                           ["fn"
                                            ["states" "task"]
                                            ["fn"
                                             ["cursor"]
                                             ["let"
                                              [["state" ["or" [":data" "states"] "|"]]]
                                              ["div"
                                               ["{}" [":style" "style-task"]]
                                               ["comp-debug" "task" ["{}" [":right" "8"]]]
                                               ["button"
                                                ["{}"
                                                 [":style"
                                                  ["merge"
                                                   "style-done"
                                                   ["{}"
                                                    [":background-color"
                                                     ["if"
                                                      [":done?" "task"]
                                                      ["hsl" "200" "20" "80"]
                                                      ["hsl" "200" "80" "70"]]]]]]
                                                 [":event" ["{}" [":click" ["handle-done" [":id" "task"]]]]]]]
                                               ["comp-space" "8" "nil"]
                                               ["input"
                                                ["{}"
                                                 ":style"
                                                 "widget/input"
                                                 ":event"
                                                 ["{}" ":input" ["on-text-change" "task"]]
                                                 ":attrs"
                                                 ["{}" ":value" [":text" "task"]]]]
                                               ["comp-space" "8" "nil"]
                                               ["input"
                                                ["{}"
                                                 [":style" "widget/input"]
                                                 [":event" ["{}" [":input" ["on-text-state" "cursor"]]]]
                                                 [":attrs" ["{}" [":value" "state"]]]]]
                                               ["comp-space" "8" "nil"]
                                               ["div"
                                                ["{}"
                                                 [":style" "widget/button"]
                                                 [":event" ["{}" ":click" ["handle-remove" "task"]]]]
                                                ["comp-text" "|Remove"]]
                                               ["comp-space" "8" "nil"]
                                               ["div" ["{}"] ["comp-text" "state" "nil"]]]]]]]],
                             "on-text-change" ["defn"
                                               "on-text-change"
                                               ["task"]
                                               ["fn"
                                                ["event" "dispatch!"]
                                                ["let"
                                                 [["task-id" [":id" "task"]] ["text" [":value" "event"]]]
                                                 ["dispatch!" ":update" ["{}" ":id" "task-id" ":text" "text"]]]]],
                             "handle-remove" ["defn"
                                              "handle-remove"
                                              ["task"]
                                              ["fn" ["e" "dispatch!"] ["dispatch!" ":remove" [":id" "task"]]]],
                             "on-text-state" ["defn"
                                              "on-text-state"
                                              ["cursor"]
                                              ["fn"
                                               ["e" "dispatch!"]
                                               ["dispatch!" ":states" ["[]" "cursor" [":value" "e"]]]]]},
                      :procs []},
         "render.patcher" {:ns ["ns"
                                "respo.render.patcher"
                                [":require"
                                 ["[]" "clojure.string" ":as" "string"]
                                 ["[]" "polyfill.core" ":refer" ["[]" "read-string*"]]
                                 ["[]"
                                  "respo.util.format"
                                  ":refer"
                                  ["[]" "dashed->camel" "event->prop" "ensure-string"]]
                                 ["[]" "respo.render.make-dom" ":refer" ["[]" "make-element" "style->string"]]]],
                           :defs {"rm-event" ["defn"
                                              "rm-event"
                                              ["target" "event-name"]
                                              ["let"
                                               [["event-prop" ["event->prop" "event-name"]]]
                                               ["aset" "target" "event-prop" "nil"]]],
                                  "replace-style" ["defn"
                                                   "replace-style"
                                                   ["target" "op"]
                                                   ["let"
                                                    [["style-name" ["dashed->camel" ["name" ["key" "op"]]]]
                                                     ["style-value" ["ensure-string" ["val" "op"]]]]
                                                    ["aset" [".-style" "target"] "style-name" "style-value"]]],
                                  "replace-element" ["defn"
                                                     "replace-element"
                                                     ["target" "op" "listener-builder"]
                                                     ["let"
                                                      [["new-element" ["make-element" "op" "listener-builder"]]
                                                       ["parent-element" [".-parentElement" "target"]]]
                                                      [".insertBefore" "parent-element" "new-element" "target"]
                                                      [".remove" "target"]]],
                                  "append-element" ["defn"
                                                    "append-element"
                                                    ["target" "op" "listener-builder"]
                                                    ["let"
                                                     [["new-element" ["make-element" "op" "listener-builder"]]]
                                                     [".appendChild" "target" "new-element"]]],
                                  "add-event" ["defn"
                                               "add-event"
                                               ["target" "op-data" "listener-builder"]
                                               ["let"
                                                [[["[]" "event-name" "coord"] "op-data"]
                                                 ["event-prop" ["event->prop" "event-name"]]]
                                                ["aset"
                                                 "target"
                                                 "event-prop"
                                                 ["fn"
                                                  ["event"]
                                                  [["listener-builder" "event-name"] "event" "coord"]
                                                  [".stopPropagation" "event"]]]]],
                                  "rm-prop" ["defn"
                                             "rm-prop"
                                             ["target" "op"]
                                             ["aset" "target" ["dashed->camel" ["name" "op"]] "nil"]],
                                  "add-prop" ["defn"
                                              "add-prop"
                                              ["target" "op"]
                                              ["let"
                                               [["prop-name" ["dashed->camel" ["name" ["key" "op"]]]]
                                                ["prop-value" ["val" "op"]]]
                                               ["case"
                                                "prop-name"
                                                ["|style" ["aset" "target" "prop-name" ["style->string" "prop-value"]]]
                                                ["aset" "target" "prop-name" "prop-value"]]]],
                                  "replace-prop" ["defn"
                                                  "replace-prop"
                                                  ["target" "op"]
                                                  ["let"
                                                   [["prop-name" ["dashed->camel" ["name" ["key" "op"]]]]
                                                    ["prop-value" ["val" "op"]]]
                                                   ["if"
                                                    ["=" "prop-name" "|value"]
                                                    ["if"
                                                     ["not=" "prop-value" [".-value" "target"]]
                                                     ["aset" "target" "prop-name" "prop-value"]]
                                                    ["aset" "target" "prop-name" "prop-value"]]]],
                                  "apply-dom-changes" ["defn"
                                                       "apply-dom-changes"
                                                       ["changes" "mount-point" "listener-builder"]
                                                       ["let"
                                                        [["root" [".-firstChild" "mount-point"]]]
                                                        ["doall"
                                                         ["->>"
                                                          "changes"
                                                          ["map"
                                                           ["fn"
                                                            ["op"]
                                                            ["let"
                                                             [["op-type" ["first" "op"]]
                                                              ["coord" ["get" "op" "1"]]
                                                              ["op-data" ["get" "op" "2"]]
                                                              ["target" ["find-target" "root" "coord"]]]
                                                             ["--" "println" "op-type" "target" "op-data"]
                                                             ["case"
                                                              "op-type"
                                                              [":replace-prop" ["replace-prop" "target" "op-data"]]
                                                              [":add-prop" ["add-prop" "target" "op-data"]]
                                                              [":rm-prop" ["rm-prop" "target" "op-data"]]
                                                              [":add-style" ["add-style" "target" "op-data"]]
                                                              [":replace-style" ["replace-style" "target" "op-data"]]
                                                              [":rm-style" ["rm-style" "target" "op-data"]]
                                                              [":add-event"
                                                               ["add-event" "target" "op-data" "listener-builder"]]
                                                              [":rm-event" ["rm-event" "target" "op-data"]]
                                                              [":add"
                                                               ["add-element" "target" "op-data" "listener-builder"]]
                                                              [":rm" ["rm-element" "target" "op-data"]]
                                                              [":replace"
                                                               ["replace-element" "target" "op-data" "listener-builder"]]
                                                              [":append"
                                                               ["append-element" "target" "op-data" "listener-builder"]]
                                                              ["println" "|not implemented:" "op-type"]]]]]]]]],
                                  "add-style" ["defn"
                                               "add-style"
                                               ["target" "op"]
                                               ["let"
                                                [["style-name" ["dashed->camel" ["name" ["key" "op"]]]]
                                                 ["style-value" ["ensure-string" ["val" "op"]]]]
                                                ["aset" [".-style" "target"] "style-name" "style-value"]]],
                                  "rm-style" ["defn"
                                              "rm-style"
                                              ["target" "op"]
                                              ["let"
                                               [["style-name" ["dashed->camel" ["name" "op"]]]]
                                               ["aset" [".-style" "target"] "style-name" "nil"]]],
                                  "rm-element" ["defn" "rm-element" ["target" "op"] [".remove" "target"]],
                                  "find-target" ["defn"
                                                 "find-target"
                                                 ["root" "coord"]
                                                 ["if"
                                                  ["empty?" "coord"]
                                                  "root"
                                                  ["let"
                                                   [["index" ["first" "coord"]]
                                                    ["child" ["aget" [".-children" "root"] "index"]]]
                                                   ["recur" "child" ["rest" "coord"]]]]],
                                  "add-element" ["defn"
                                                 "add-element"
                                                 ["target" "op" "listener-builder"]
                                                 ["let"
                                                  [["new-element" ["make-element" "op" "listener-builder"]]
                                                   ["parent-element" [".-parentElement" "target"]]]
                                                  [".insertBefore" "parent-element" "new-element" "target"]]]},
                           :procs []},
         "render.make-dom" {:ns ["ns"
                                 "respo.render.make-dom"
                                 [":require"
                                  ["[]" "clojure.string" ":as" "string"]
                                  ["[]"
                                   "respo.util.format"
                                   ":refer"
                                   ["[]" "dashed->camel" "event->prop" "ensure-string"]]
                                  ["[]" "polyfill.core" ":refer" ["[]" "document-create-element*"]]]],
                            :defs {"make-element" ["defn"
                                                   "make-element"
                                                   ["virtual-element" "listener-builder"]
                                                   ["let"
                                                    [["tag-name" ["name" [":name" "virtual-element"]]]
                                                     ["attrs" [":attrs" "virtual-element"]]
                                                     ["style" [":style" "virtual-element"]]
                                                     ["children" [":children" "virtual-element"]]
                                                     ["element" ["document-create-element*" "tag-name"]]
                                                     ["child-elements"
                                                      ["->>"
                                                       "children"
                                                       ["map"
                                                        ["fn"
                                                         ["entry"]
                                                         ["make-element" ["last" "entry"] "listener-builder"]]]]]]
                                                    ["doall"
                                                     ["->>"
                                                      "attrs"
                                                      ["map"
                                                       ["fn"
                                                        ["entry"]
                                                        ["let"
                                                         [["k" ["dashed->camel" ["name" ["first" "entry"]]]]
                                                          ["v" ["last" "entry"]]]
                                                         [".setAttribute" "element" "k" "v"]
                                                         ["aset" "element" "k" "v"]]]]]]
                                                    [".setAttribute" "element" "|style" ["style->string" "style"]]
                                                    ["doall"
                                                     ["->>"
                                                      [":event" "virtual-element"]
                                                      ["map"
                                                       ["fn"
                                                        ["entry"]
                                                        ["--" "println" "|Looking into event:" "entry"]
                                                        ["let"
                                                         [["event-name" ["key" "entry"]]
                                                          ["name-in-string" ["event->prop" "event-name"]]]
                                                         ["--" "println" "|listener:" "event-name" "name-in-string"]
                                                         ["aset"
                                                          "element"
                                                          "name-in-string"
                                                          ["fn"
                                                           ["event"]
                                                           [["listener-builder" "event-name"]
                                                            "event"
                                                            [":coord" "virtual-element"]]
                                                           [".stopPropagation" "event"]]]]]]]]
                                                    ["doseq"
                                                     ["[]" "child-element" "child-elements"]
                                                     [".appendChild" "element" "child-element"]]
                                                    "element"]],
                                   "style->string" ["defn"
                                                    "style->string"
                                                    ["styles"]
                                                    ["string/join"
                                                     "|"
                                                     ["->>"
                                                      "styles"
                                                      ["map"
                                                       ["fn"
                                                        ["entry"]
                                                        ["let"
                                                         [["k" ["first" "entry"]]
                                                          ["v" ["ensure-string" ["last" "entry"]]]]
                                                         ["str" ["name" "k"] "|:" "v" "|;"]]]]]]]},
                            :procs []},
         "controller.resolver" {:ns ["ns"
                                     "respo.controller.resolver"
                                     [":require"
                                      ["[]" "clojure.string" ":as" "string"]
                                      ["[]" "respo.util.format" ":refer" ["[]" "purify-element"]]
                                      ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?"]]
                                      ["[]" "polyfill.core" ":refer" ["[]" "raise*"]]
                                      ["[]" "respo.util.list" ":refer" ["[]" "filter-first"]]]],
                                :defs {"get-component-at" ["defn"
                                                           "get-component-at"
                                                           [["markup" "coord"]
                                                            ["get-component-at" "nil" "markup" "coord"]]
                                                           [["acc" "markup" "coord"]
                                                            ["if"
                                                             ["empty?" "coord"]
                                                             "acc"
                                                             ["let"
                                                              [["coord-head" ["first" "coord"]]]
                                                              ["if"
                                                               ["component?" "markup"]
                                                               ["if"
                                                                ["=" [":name" "markup"] "coord-head"]
                                                                ["recur" "markup" [":tree" "markup"] ["rest" "coord"]]
                                                                "nil"]
                                                               ["let"
                                                                [["child-pair"
                                                                  ["filter-first"
                                                                   ["fn"
                                                                    ["child-entry"]
                                                                    ["=" ["get" "child-entry" "0"] "coord-head"]]
                                                                   [":children" "markup"]]]]
                                                                ["if"
                                                                 ["some?" "child-pair"]
                                                                 ["recur" "acc" ["last" "child-pair"] ["rest" "coord"]]
                                                                 "nil"]]]]]]],
                                       "find-event-target" ["defn"
                                                            "find-event-target"
                                                            ["element" "coord" "event-name"]
                                                            ["let"
                                                             [["target-element" ["get-markup-at" "element" "coord"]]
                                                              ["element-exists?" ["some?" "target-element"]]]
                                                             ["--" "println" "|target element:" ["pr-str" "event-name"]]
                                                             ["if"
                                                              ["and"
                                                               "element-exists?"
                                                               ["contains?" [":event" "target-element"] "event-name"]]
                                                              "target-element"
                                                              ["if"
                                                               ["=" "coord" ["[]"]]
                                                               "nil"
                                                               ["if"
                                                                "element-exists?"
                                                                ["recur"
                                                                 "element"
                                                                 ["subvec" "coord" "0" ["-" ["count" "coord"] "1"]]
                                                                 "event-name"]
                                                                "nil"]]]]],
                                       "get-markup-at" ["defn"
                                                        "get-markup-at"
                                                        ["markup" "coord"]
                                                        ["--" "println" "|markup:" ["pr-str" "coord"]]
                                                        ["if"
                                                         ["empty?" "coord"]
                                                         "markup"
                                                         ["if"
                                                          ["component?" "markup"]
                                                          ["recur" [":tree" "markup"] ["rest" "coord"]]
                                                          ["let"
                                                           [["coord-head" ["first" "coord"]]
                                                            ["child-pair"
                                                             ["filter-first"
                                                              ["fn"
                                                               ["child-entry"]
                                                               ["=" ["get" "child-entry" "0"] "coord-head"]]
                                                              [":children" "markup"]]]]
                                                           ["if"
                                                            ["some?" "child-pair"]
                                                            ["get-markup-at" ["get" "child-pair" "1"] ["rest" "coord"]]
                                                            ["raise*"
                                                             ["str"
                                                              "|child not found:"
                                                              "coord"
                                                              ["map" "first" [":children" "markup"]]]]]]]]]},
                                :procs []},
         "util.list" {:ns ["ns" "respo.util.list"],
                      :defs {"filter-first" ["defn"
                                             "filter-first"
                                             ["f" "xs"]
                                             ["reduce" ["fn" ["acc" "x"] ["when" ["f" "x"] ["reduced" "x"]]] "nil" "xs"]]},
                      :procs []},
         "schema" {:ns ["ns" "respo.schema"],
                   :defs {"task" ["def" "task" ["{}" [":id" "nil"] [":text" "|"] [":done?" "false"]]],
                          "store" ["def" "store" ["{}" [":tasks" ["[]"]] [":states" ["{}"]]]]},
                   :procs []},
         "comp.container" {:ns ["ns"
                                "respo.comp.container"
                                [":require"
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]
                                 ["[]" "respo.cursor" ":refer" ["[]" "with-cursor"]]
                                 ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                 ["[]" "respo.comp.todolist" ":refer" ["[]" "comp-todolist"]]]],
                           :defs {"style-states" ["def" "style-states" ["{}" [":padding" "8"]]],
                                  "comp-container" ["def"
                                                    "comp-container"
                                                    ["create-comp"
                                                     ":container"
                                                     ["fn"
                                                      ["store"]
                                                      ["fn"
                                                       ["cursor"]
                                                       ["let"
                                                        [["state" [":states" "store"]]]
                                                        ["div"
                                                         ["{}"]
                                                         ["with-cursor"
                                                          ":todolist"
                                                          ["comp-todolist" [":todolist" "state"] [":tasks" "store"]]]
                                                         ["div"
                                                          ["{}" [":style" "style-states"]]
                                                          ["comp-text" ["pr-str" [":states" "store"]] "nil"]]]]]]]]},
                           :procs []},
         "comp.todolist" {:ns ["ns"
                               "respo.comp.todolist"
                               [":require"
                                ["[]" "clojure.string" ":as" "string"]
                                ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                ["[]" "respo.comp.task" ":refer" ["[]" "comp-task"]]
                                ["[]" "respo.alias" ":refer" ["[]" "div" "span" "input" "create-comp"]]
                                ["[]" "respo.cursor" ":refer" ["[]" "with-cursor"]]
                                ["[]" "respo.comp.zero" ":refer" ["[]" "component-zero"]]
                                ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                ["[]" "respo.comp.wrap" ":refer" ["[]" "comp-wrap"]]
                                ["[]" "polyfill.core" ":refer" ["[]" "text-width*" "io-get-time*" "set-timeout*"]]
                                ["[]" "respo.style.widget" ":as" "widget"]]],
                          :defs {"clear-done" ["defn"
                                               "clear-done"
                                               ["e" "dispatch!"]
                                               ["println" "|dispatch clear-done"]
                                               ["dispatch!" ":clear" "nil"]],
                                 "handle-add" ["defn"
                                               "handle-add"
                                               ["cursor" "state"]
                                               ["fn"
                                                ["e" "dispatch!"]
                                                ["dispatch!" ":add" [":draft" "state"]]
                                                ["dispatch!" ":states" ["[]" "cursor" ["assoc" "state" ":draft" "|"]]]]],
                                 "style-root" ["def"
                                               "style-root"
                                               ["{}"
                                                [":color" ":black"]
                                                [":background-color" ["hsl" "120" "20" "98"]]
                                                [":line-height" "|24px"]
                                                [":font-size" "16"]
                                                [":padding" "10"]
                                                [":font-family" "|\"微软雅黑\", Verdana"]]],
                                 "style-list" ["def"
                                               "style-list"
                                               ["{}" [":color" ":black"] [":background-color" ["hsl" "120" "20" "98"]]]],
                                 "style-toolbar" ["def"
                                                  "style-toolbar"
                                                  ["{}"
                                                   [":display" ":flex"]
                                                   [":flex-direction" ":row"]
                                                   [":justify-content" ":start"]
                                                   [":padding" "|4px 0"]
                                                   [":white-space" ":nowrap"]]],
                                 "style-panel" ["def" "style-panel" ["{}" [":display" ":flex"] [":margin-bottom" "4"]]],
                                 "on-test" ["defn"
                                            "on-test"
                                            ["e" "dispatch!"]
                                            ["println" "|trigger test!"]
                                            ["dispatch!" ":clear" "nil"]
                                            ["let"
                                             [["started" ["io-get-time*"]]]
                                             ["loop"
                                              ["[]" "x" "200"]
                                              ["dispatch!" ":add" "|empty"]
                                              ["if" [">" "x" "0"] ["recur" ["dec" "x"]]]]
                                             ["loop"
                                              ["[]" "x" "20"]
                                              ["dispatch!" ":hit-first" ["rand"]]
                                              ["if" [">" "x" "0"] ["recur" ["dec" "x"]]]]
                                             ["dispatch!" ":clear" "nil"]
                                             ["loop"
                                              ["[]" "x" "10"]
                                              ["dispatch!" ":add" "|only 10 items"]
                                              ["if" [">" "x" "0"] ["recur" ["dec" "x"]]]]
                                             ["println" "|time cost:" ["-" ["io-get-time*"] "started"]]]],
                                 "on-focus" ["defn" "on-focus" ["e" "dispatch!"] ["println" "|Just focused~"]],
                                 "initial-state" ["def" "initial-state" ["{}" [":draft" "|"] [":loacked?" "false"]]],
                                 "on-text-change" ["defn"
                                                   "on-text-change"
                                                   ["cursor" "state"]
                                                   ["fn"
                                                    ["e" "dispatch!"]
                                                    ["dispatch!"
                                                     ":states"
                                                     ["[]" "cursor" ["assoc" "state" ":draft" [":value" "e"]]]]]],
                                 "on-lock" ["defn"
                                            "on-lock"
                                            ["cursor" "state"]
                                            ["fn"
                                             ["e" "dispatch!"]
                                             ["dispatch!" ":states" ["[]" "cursor" ["update" "state" ":locked?" "not"]]]]],
                                 "comp-todolist" ["def"
                                                  "comp-todolist"
                                                  ["create-comp"
                                                   ":todolist"
                                                   ["fn"
                                                    ["states" "tasks"]
                                                    ["fn"
                                                     ["cursor"]
                                                     ["let"
                                                      [["state" ["or" [":data" "states"] "initial-state"]]]
                                                      ["div"
                                                       ["{}" ":style" "style-root"]
                                                       ["comp-debug" "state" ["{}" [":left" "|80px"]]]
                                                       ["div"
                                                        ["{}" ":style" "style-panel"]
                                                        ["input"
                                                         ["{}"
                                                          [":style"
                                                           ["merge"
                                                            "widget/input"
                                                            ["{}"
                                                             [":width"
                                                              ["max"
                                                               "200"
                                                               ["+"
                                                                "24"
                                                                ["text-width*"
                                                                 [":draft" "state"]
                                                                 "16"
                                                                 "|BlinkMacSystemFont"]]]]]]]
                                                          [":event"
                                                           ["{}"
                                                            [":input" ["on-text-change" "cursor" "state"]]
                                                            [":focus" "on-focus"]]]
                                                          [":attrs"
                                                           ["{}" ":placeholder" "|Text" ":value" [":draft" "state"]]]]]
                                                        ["comp-space" "8" "nil"]
                                                        ["span"
                                                         ["{}"
                                                          [":style" "widget/button"]
                                                          [":event" ["{}" ":click" ["handle-add" "cursor" "state"]]]]
                                                         ["comp-text" "|Add" "nil"]]
                                                        ["comp-space" "8" "nil"]
                                                        ["span"
                                                         ["{}"
                                                          ":style"
                                                          "widget/button"
                                                          ":event"
                                                          ["{}" ":click" "clear-done"]
                                                          ":attrs"
                                                          ["{}" ":inner-text" "|Clear"]]]
                                                        ["comp-space" "8" "nil"]
                                                        ["div"
                                                         ["{}"]
                                                         ["div"
                                                          ["{}"
                                                           [":style" "widget/button"]
                                                           [":event" ["{}" [":click" "on-test"]]]]
                                                          ["comp-text" "|heavy tasks" "nil"]]]]
                                                       ["div"
                                                        ["{}"
                                                         ":style"
                                                         "style-list"
                                                         ":attrs"
                                                         ["{}" ":class-name" "|task-list"]]
                                                        ["->>"
                                                         "tasks"
                                                         ["reverse"]
                                                         ["map"
                                                          ["fn"
                                                           ["task"]
                                                           ["let"
                                                            [["task-id" [":id" "task"]]]
                                                            ["[]"
                                                             "task-id"
                                                             ["with-cursor"
                                                              "task-id"
                                                              ["comp-task" ["get" "states" "task-id"] "task"]]]]]]]]
                                                       ["if"
                                                        [">" ["count" "tasks"] "0"]
                                                        ["div"
                                                         ["{}"
                                                          [":style" "style-toolbar"]
                                                          [":attrs" ["{}" ":spell-check" "true"]]]
                                                         ["div"
                                                          ["{}"
                                                           [":style" "widget/button"]
                                                           [":event"
                                                            ["if"
                                                             [":locked?" "state"]
                                                             ["{}"]
                                                             ["{}" ":click" "clear-done"]]]]
                                                          ["comp-text" "|Clear2"]]
                                                         ["comp-space" "8" "nil"]
                                                         ["div"
                                                          ["{}"
                                                           [":style" "widget/button"]
                                                           [":event" ["{}" ":click" ["on-lock" "cursor" "state"]]]]
                                                          ["comp-text" ["str" "|Lock?" [":locked?" "state"]] "nil"]]
                                                         ["comp-space" "8" "nil"]
                                                         ["comp-wrap"]]]
                                                       ["--" "comp-debug" "tasks" ["{}"]]]]]]]]},
                          :procs []},
         "controller.deliver" {:ns ["ns"
                                    "respo.controller.deliver"
                                    [":require"
                                     ["[]"
                                      "respo.controller.resolver"
                                      ":refer"
                                      ["[]" "find-event-target" "get-markup-at" "get-component-at"]]
                                     ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?"]]]],
                               :defs {"all-component-coords" ["defn"
                                                              "all-component-coords"
                                                              ["markup"]
                                                              ["if"
                                                               ["component?" "markup"]
                                                               ["cons"
                                                                [":coord" "markup"]
                                                                ["all-component-coords" [":tree" "markup"]]]
                                                               ["->>"
                                                                [":children" "markup"]
                                                                ["map"
                                                                 ["fn"
                                                                  ["child-entry"]
                                                                  ["all-component-coords" ["val" "child-entry"]]]]
                                                                ["apply" "concat"]]]],
                                      "build-deliver-event" ["defn"
                                                             "build-deliver-event"
                                                             ["element-ref" "dispatch!"]
                                                             ["fn"
                                                              ["coord" "event-name" "simple-event"]
                                                              ["let"
                                                               [["target-element"
                                                                 ["find-event-target"
                                                                  "@element-ref"
                                                                  "coord"
                                                                  "event-name"]]
                                                                ["target-component"
                                                                 ["get-component-at" "@element-ref" "coord"]]
                                                                ["target-listener"
                                                                 ["get" [":event" "target-element"] "event-name"]]]
                                                               ["if"
                                                                ["some?" "target-listener"]
                                                                ["do"
                                                                 ["--"
                                                                  "println"
                                                                  "|listener found:"
                                                                  "coord"
                                                                  "event-name"]
                                                                 ["target-listener" "simple-event" "dispatch!"]]
                                                                ["--"
                                                                 "println"
                                                                 "|found no listener:"
                                                                 "coord"
                                                                 "event-name"]]]]]},
                               :procs []},
         "comp.space" {:ns ["ns"
                            "respo.comp.space"
                            [":require" ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]]],
                       :defs {"comp-space" ["def"
                                            "comp-space"
                                            ["create-comp"
                                             ":space"
                                             ["fn"
                                              ["w" "h"]
                                              ["fn" ["cursor"] ["div" ["{}" [":style" ["style-space" "w" "h"]]]]]]]],
                              "style-space" ["defn"
                                             "style-space"
                                             ["w" "h"]
                                             ["if"
                                              ["some?" "w"]
                                              ["{}" [":width" "w"] [":height" "|1px"] [":display" ":inline-block"]]
                                              ["{}" [":width" "|1px"] [":height" "h"] [":display" ":inline-block"]]]]},
                       :procs []},
         "util.format" {:ns ["ns"
                             "respo.util.format"
                             [":require"
                              ["[]" "clojure.string" ":as" "string"]
                              ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?"]]]],
                        :defs {"prop->attr" ["defn" "prop->attr" ["x"] ["case" "x" ["|class-name" "|class"] "x"]],
                               "event->prop" ["defn" "event->prop" ["x"] ["str" "|on" ["name" "x"]]],
                               "ensure-string" ["defn"
                                                "ensure-string"
                                                ["x"]
                                                ["cond"
                                                 [["string?" "x"] "x"]
                                                 [["keyword?" "x"] ["name" "x"]]
                                                 [":else" ["str" "x"]]]],
                               "event->string" ["defn" "event->string" ["x"] ["subs" ["name" "x"] "3"]],
                               "dashed->camel" ["defn"
                                                "dashed->camel"
                                                [["x"] ["dashed->camel" "|" "x" "false"]]
                                                [["acc" "piece" "promoted?"]
                                                 ["if"
                                                  ["=" "piece" "|"]
                                                  "acc"
                                                  ["let"
                                                   [["cursor" ["get" "piece" "0"]]
                                                    ["piece-followed" ["subs" "piece" "1"]]]
                                                   ["if"
                                                    ["=" "cursor" "|-"]
                                                    ["recur" "acc" "piece-followed" "true"]
                                                    ["recur"
                                                     ["str"
                                                      "acc"
                                                      ["if" "promoted?" ["string/upper-case" "cursor"] "cursor"]]
                                                     "piece-followed"
                                                     "false"]]]]]],
                               "purify-events" ["defn"
                                                "purify-events"
                                                ["events"]
                                                ["->>"
                                                 "events"
                                                 ["map" ["fn" ["entry"] ["[]" ["key" "entry"] "true"]]]
                                                 ["into" ["{}"]]]],
                               "event->edn" ["defn"
                                             "event->edn"
                                             ["event"]
                                             ["--" ".log" "js/console" "|simplify event:" "event"]
                                             ["->"
                                              ["case"
                                               [".-type" "event"]
                                               ["|click" ["{}" ":type" ":click"]]
                                               ["|keydown" ["{}" ":type" ":keydown" ":key-code" [".-keyCode" "event"]]]
                                               ["|keyup" ["{}" ":type" ":keyup" ":key-code" [".-keyCode" "event"]]]
                                               ["|input"
                                                ["{}" ":type" ":input" ":value" ["aget" [".-target" "event"] "|value"]]]
                                               ["|change"
                                                ["{}" ":type" ":change" ":value" ["aget" [".-target" "event"] "|value"]]]
                                               ["|focus" ["{}" ":type" ":focus"]]
                                               ["{}"
                                                ":type"
                                                [".-type" "event"]
                                                ":msg"
                                                ["str" "|Unhandled event: " [".-type" "event"]]]]
                                              ["assoc" ":original-event" "event"]]],
                               "mute-element" ["defn"
                                               "mute-element"
                                               ["element"]
                                               ["if"
                                                ["component?" "element"]
                                                ["update" "element" ":tree" "mute-element"]
                                                ["->"
                                                 "element"
                                                 ["update" ":event" ["fn" ["events"] ["list"]]]
                                                 ["update"
                                                  ":children"
                                                  ["fn"
                                                   ["children"]
                                                   ["->>"
                                                    "children"
                                                    ["map"
                                                     ["fn"
                                                      ["entry"]
                                                      ["[]" ["first" "entry"] ["mute-element" ["last" "entry"]]]]]]]]]]],
                               "purify-element" ["defn"
                                                 "purify-element"
                                                 ["markup"]
                                                 ["if"
                                                  ["nil?" "markup"]
                                                  "nil"
                                                  ["if"
                                                   ["component?" "markup"]
                                                   ["recur" [":tree" "markup"]]
                                                   ["into"
                                                    ["{}"]
                                                    ["->"
                                                     "markup"
                                                     ["update" ":event" "purify-events"]
                                                     ["update"
                                                      ":children"
                                                      ["fn"
                                                       ["children"]
                                                       ["->>"
                                                        "children"
                                                        ["map"
                                                         ["fn"
                                                          ["entry"]
                                                          ["[]" ["first" "entry"] ["purify-element" ["last" "entry"]]]]]]]]]]]]],
                               "text->html" ["defn"
                                             "text->html"
                                             ["x"]
                                             ["if"
                                              ["some?" "x"]
                                              ["->"
                                               ["str" "x"]
                                               ["string/replace" ["re-pattern" "|>"] "|&gt;"]
                                               ["string/replace" ["re-pattern" "|<"] "|&lt;"]]
                                              "nil"]]},
                        :procs []},
         "cursor" {:ns ["ns" "respo.cursor"],
                   :defs {"mutate" ["defn"
                                    "mutate"
                                    ["op-data"]
                                    ["fn"
                                     ["states"]
                                     ["let"
                                      [[["[]" "cursor" "next-state"] "op-data"]]
                                      ["assoc-in" "states" ["conj" "cursor" ":data"] "next-state"]]]],
                          "with-cursor" ["defn" "with-cursor" ["k" "component"] ["assoc" "component" ":cursor" "k"]]},
                   :procs []},
         "test-component.page" {:ns ["ns"
                                     "respo.test-component.page"
                                     [":require"
                                      ["[]"
                                       "respo.alias"
                                       ":refer"
                                       ["[]" "create-comp" "div" "html" "head" "body" "meta'" "link" "script" "style"]]]],
                                :defs {"comp-page" ["def"
                                                    "comp-page"
                                                    ["create-comp"
                                                     ":page"
                                                     ["fn" ["store"] ["fn" ["cursor"] ["div" ["{}"]]]]]]},
                                :procs []},
         "updater.core" {:ns ["ns"
                              "respo.updater.core"
                              [":require"
                               ["[]" "clojure.string" ":as" "string"]
                               ["[]" "respo.cursor" ":refer" ["[]" "mutate"]]]],
                         :defs {"updater" ["defn"
                                           "updater"
                                           ["store" "op-type" "op-data" "op-id"]
                                           ["--" "println" ["pr-str" "store"] ["pr-str" "op-type"] ["pr-str" "op-data"]]
                                           ["case"
                                            "op-type"
                                            [":states" ["update" "store" ":states" ["mutate" "op-data"]]]
                                            [":add"
                                             ["update"
                                              "store"
                                              ":tasks"
                                              ["fn"
                                               ["tasks"]
                                               ["conj" "tasks" ["{}" ":text" "op-data" ":id" "op-id" ":done?" "false"]]]]]
                                            [":remove"
                                             ["update"
                                              "store"
                                              ":tasks"
                                              ["fn"
                                               ["tasks"]
                                               ["->>"
                                                "tasks"
                                                ["filterv" ["fn" ["task"] ["not" ["=" [":id" "task"] "op-data"]]]]]]]]
                                            [":clear" ["assoc" "store" ":tasks" ["[]"]]]
                                            [":update"
                                             ["update"
                                              "store"
                                              ":tasks"
                                              ["fn"
                                               ["tasks"]
                                               ["let"
                                                [["task-id" [":id" "op-data"]] ["text" [":text" "op-data"]]]
                                                ["->>"
                                                 "tasks"
                                                 ["mapv"
                                                  ["fn"
                                                   ["task"]
                                                   ["if"
                                                    ["=" [":id" "task"] "task-id"]
                                                    ["assoc" "task" ":text" "text"]
                                                    "task"]]]]]]]]
                                            [":hit-first"
                                             ["->"
                                              "store"
                                              ["update-in"
                                               ["[]" ":tasks" "0"]
                                               ["fn" ["task"] ["assoc" "task" ":text" "op-data"]]]]]
                                            [":toggle"
                                             ["update"
                                              "store"
                                              ":tasks"
                                              ["fn"
                                               ["tasks"]
                                               ["let"
                                                [["task-id" "op-data"]]
                                                ["->>"
                                                 "tasks"
                                                 ["mapv"
                                                  ["fn"
                                                   ["task"]
                                                   ["if"
                                                    ["=" [":id" "task"] "task-id"]
                                                    ["update" "task" ":done?" "not"]
                                                    "task"]]]]]]]]
                                            "store"]]},
                         :procs []},
         "comp.text" {:ns ["ns"
                           "respo.comp.text"
                           [":require" ["[]" "respo.alias" ":refer" ["[]" "create-comp" "span" "code"]]]],
                      :defs {"comp-text" ["def"
                                          "comp-text"
                                          ["create-comp"
                                           ":text"
                                           ["fn"
                                            ["content" "style"]
                                            ["fn"
                                             ["cursor"]
                                             ["span"
                                              ["{}" [":attrs" ["{}" [":inner-text" "content"]]] [":style" "style"]]]]]]],
                             "comp-code" ["def"
                                          "comp-code"
                                          ["create-comp"
                                           ":code"
                                           ["fn"
                                            ["content" "style"]
                                            ["fn"
                                             ["cursor"]
                                             ["code"
                                              ["{}" [":attrs" ["{}" [":inner-text" "content"]]] [":style" "style"]]]]]]]},
                      :procs []},
         "test-component.todolist" {:ns ["ns"
                                         "respo.test-component.todolist"
                                         [":require"
                                          ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]
                                          ["[]" "respo.test-component.task" ":refer" ["[]" "comp-task"]]]],
                                    :defs {"style-todolist" ["def"
                                                             "style-todolist"
                                                             ["{}"
                                                              [":color" ":blue"]
                                                              [":font-family" "|\"微软雅黑\", Verdana"]]],
                                           "comp-todolist" ["def"
                                                            "comp-todolist"
                                                            ["create-comp"
                                                             ":todolist"
                                                             ["fn"
                                                              ["tasks"]
                                                              ["fn"
                                                               ["cursor"]
                                                               ["div"
                                                                ["{}" [":style" "style-todolist"]]
                                                                ["->>"
                                                                 "tasks"
                                                                 ["map"
                                                                  ["fn"
                                                                   ["task"]
                                                                   ["[]" [":id" "task"] ["comp-task" "task"]]]]]]]]]]},
                                    :procs []},
         "alias" {:ns ["ns"
                       "respo.alias"
                       [":require" ["[]" "respo.util.detect" ":refer" ["[]" "component?" "element?"]]]],
                  :defs {"canvas" ["defn"
                                   "canvas"
                                   ["props" "&" "children"]
                                   ["create-element" ":canvas" "props" "children"]],
                         "br" ["defn" "br" ["props" "&" "children"] ["create-element" ":br" "props" "children"]],
                         "create-element" ["defn"
                                           "create-element"
                                           ["tag-name" "props" "children"]
                                           ["let"
                                            [["attrs"
                                              ["if"
                                               ["contains?" "props" ":attrs"]
                                               ["sort-by" "first" [":attrs" "props"]]
                                               ["list"]]]
                                             ["styles"
                                              ["if"
                                               ["contains?" "props" ":style"]
                                               ["sort-by" "first" [":style" "props"]]
                                               ["list"]]]
                                             ["event" ["if" ["contains?" "props" ":event"] [":event" "props"] ["{}"]]]
                                             ["children" ["arrange-children" "children"]]]
                                            ["{}"
                                             [":name" "tag-name"]
                                             [":coord" "nil"]
                                             [":attrs" "attrs"]
                                             [":style" "styles"]
                                             [":event" "event"]
                                             [":children" "children"]]]],
                         "img" ["defn" "img" ["props" "&" "children"] ["create-element" ":img" "props" "children"]],
                         "body" ["defn" "body" ["props" "&" "children"] ["create-element" ":body" "props" "children"]],
                         "p" ["defn" "p" ["props" "&" "children"] ["create-element" ":p" "props" "children"]],
                         "arrange-children" ["defn"
                                             "arrange-children"
                                             ["children"]
                                             ["->>"
                                              ["if"
                                               ["and"
                                                ["=" "1" ["count" "children"]]
                                                ["not" ["component?" ["first" "children"]]]
                                                ["not" ["element?" ["first" "children"]]]]
                                               ["first" "children"]
                                               ["map-indexed" "vector" "children"]]
                                              ["filter" ["fn" ["pair"] ["some?" ["last" "pair"]]]]]],
                         "option" ["defn"
                                   "option"
                                   ["props" "&" "children"]
                                   ["create-element" ":option" "props" "children"]],
                         "footer" ["defn"
                                   "footer"
                                   ["props" "&" "children"]
                                   ["create-element" ":footer" "props" "children"]],
                         "h2" ["defn" "h2" ["props" "&" "children"] ["create-element" ":h2" "props" "children"]],
                         "create-comp" ["defn"
                                        "create-comp"
                                        ["comp-name" "render"]
                                        ["--" "println" "|create component:" "comp-name"]
                                        ["let"
                                         [["initial-comp"
                                           ["{}"
                                            [":name" "comp-name"]
                                            [":coord" "nil"]
                                            [":args" ["[]"]]
                                            [":render" "render"]
                                            [":tree" "nil"]
                                            [":cost" "nil"]
                                            [":cursor" "nil"]]]]
                                         ["fn" ["&" "args"] ["assoc" "initial-comp" ":args" "args"]]]],
                         "hr" ["defn" "hr" ["props" "&" "children"] ["create-element" ":hr" "props" "children"]],
                         "style" ["defn"
                                  "style"
                                  ["props" "&" "children"]
                                  ["create-element" ":style" "props" "children"]],
                         "section" ["defn"
                                    "section"
                                    ["props" "&" "children"]
                                    ["create-element" ":section" "props" "children"]],
                         "span" ["defn" "span" ["props" "&" "children"] ["create-element" ":span" "props" "children"]],
                         "script" ["defn"
                                   "script"
                                   ["props" "&" "children"]
                                   ["create-element" ":script" "props" "children"]],
                         "select" ["defn"
                                   "select"
                                   ["props" "&" "children"]
                                   ["create-element" ":select" "props" "children"]],
                         "a" ["defn" "a" ["props" "&" "children"] ["create-element" ":a" "props" "children"]],
                         "meta'" ["defn" "meta'" ["props" "&" "children"] ["create-element" ":meta" "props" "children"]],
                         "input" ["defn"
                                  "input"
                                  ["props" "&" "children"]
                                  ["create-element" ":input" "props" "children"]],
                         "head" ["defn" "head" ["props" "&" "children"] ["create-element" ":head" "props" "children"]],
                         "title" ["defn"
                                  "title"
                                  ["props" "&" "children"]
                                  ["create-element" ":title" "props" "children"]],
                         "textarea" ["defn"
                                     "textarea"
                                     ["props" "&" "children"]
                                     ["create-element" ":textarea" "props" "children"]],
                         "link" ["defn" "link" ["props" "&" "children"] ["create-element" ":link" "props" "children"]],
                         "div" ["defn" "div" ["props" "&" "children"] ["create-element" ":div" "props" "children"]],
                         "pre" ["defn" "pre" ["props" "&" "children"] ["create-element" ":pre" "props" "children"]],
                         "html" ["defn" "html" ["props" "&" "children"] ["create-element" ":html" "props" "children"]],
                         "h1" ["defn" "h1" ["props" "&" "children"] ["create-element" ":h1" "props" "children"]],
                         "code" ["defn" "code" ["props" "&" "children"] ["create-element" ":code" "props" "children"]],
                         "header" ["defn"
                                   "header"
                                   ["props" "&" "children"]
                                   ["create-element" ":header" "props" "children"]],
                         "button" ["defn"
                                   "button"
                                   ["props" "&" "children"]
                                   ["create-element" ":button" "props" "children"]]},
                  :procs []},
         "util.detect" {:ns ["ns" "respo.util.detect"],
                        :defs {"element?" ["defn" "element?" ["x"] ["and" ["map?" "x"] ["contains?" "x" ":event"]]],
                               "=seq" ["defn"
                                       "=seq"
                                       ["a" "b"]
                                       ["let"
                                        [["a-empty?" ["empty?" "a"]] ["b-empty?" ["empty?" "b"]]]
                                        ["if"
                                         ["and" "a-empty?" "b-empty?"]
                                         "true"
                                         ["if"
                                          ["or" "a-empty?" "b-empty?"]
                                          "false"
                                          ["if"
                                           ["identical?" ["first" "a"] ["first" "b"]]
                                           ["recur" ["rest" "a"] ["rest" "b"]]
                                           "false"]]]]],
                               "component?" ["defn" "component?" ["x"] ["and" ["map?" "x"] ["contains?" "x" ":tree"]]]},
                        :procs []},
         "controller.client" {:ns ["ns"
                                   "respo.controller.client"
                                   [":require"
                                    ["[]" "respo.render.patcher" ":refer" ["[]" "apply-dom-changes"]]
                                    ["[]" "polyfill.core" ":refer" ["[]" "read-string*"]]
                                    ["[]" "respo.util.format" ":refer" ["[]" "event->string" "event->edn"]]
                                    ["[]" "respo.render.make-dom" ":refer" ["[]" "make-element"]]]],
                              :defs {"build-listener" ["defn"
                                                       "build-listener"
                                                       ["event-name" "deliver-event"]
                                                       ["fn"
                                                        ["event" "coord"]
                                                        ["let"
                                                         [["simple-event" ["event->edn" "event"]]]
                                                         ["deliver-event" "coord" "event-name" "simple-event"]]]],
                                     "release-instance" ["defn"
                                                         "release-instance"
                                                         ["mount-point"]
                                                         ["set!" [".-innerHTML" "mount-point"] "|"]],
                                     "patch-instance" ["defn"
                                                       "patch-instance"
                                                       ["changes" "mount-point" "deliver-event"]
                                                       ["let"
                                                        [["listener-builder"
                                                          ["fn"
                                                           ["event-name"]
                                                           ["build-listener" "event-name" "deliver-event"]]]]
                                                        ["apply-dom-changes" "changes" "mount-point" "listener-builder"]]],
                                     "activate-instance" ["defn"
                                                          "activate-instance"
                                                          ["entire-dom" "mount-point" "deliver-event"]
                                                          ["let"
                                                           [["listener-builder"
                                                             ["fn"
                                                              ["event-name"]
                                                              ["build-listener" "event-name" "deliver-event"]]]]
                                                           ["set!" [".-innerHTML" "mount-point"] "|"]
                                                           [".appendChild"
                                                            "mount-point"
                                                            ["make-element" "entire-dom" "listener-builder"]]]]},
                              :procs []},
         "test-component.task" {:ns ["ns"
                                     "respo.test-component.task"
                                     [":require"
                                      ["[]" "respo.alias" ":refer" ["[]" "div" "span" "create-comp"]]
                                      ["[]" "hsl.core" ":refer" ["[]" "hsl"]]]],
                                :defs {"comp-task" ["def"
                                                    "comp-task"
                                                    ["create-comp"
                                                     ":task"
                                                     ["fn"
                                                      ["task"]
                                                      ["fn"
                                                       ["cursor"]
                                                       ["div"
                                                        ["{}"]
                                                        ["span"
                                                         ["{}" [":attrs" ["{}" [":inner-text" [":text" "task"]]]]]]]]]]]},
                                :procs []},
         "core" {:ns ["ns"
                      "respo.core"
                      [":require"
                       ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                       ["[]" "respo.render.expander" ":refer" ["[]" "render-app"]]
                       ["[]" "respo.controller.deliver" ":refer" ["[]" "build-deliver-event"]]
                       ["[]" "respo.render.differ" ":refer" ["[]" "find-element-diffs"]]
                       ["[]" "respo.util.format" ":refer" ["[]" "purify-element" "mute-element"]]
                       ["[]" "respo.controller.client" ":refer" ["[]" "activate-instance" "patch-instance"]]
                       ["[]" "polyfill.core" ":refer" ["[]" "log*"]]]],
                 :defs {"global-element" ["defonce" "global-element" ["atom" "nil"]],
                        "render!" ["defn"
                                   "render!"
                                   ["markup" "target" "dispatch"]
                                   ["if"
                                    ["some?" "@global-element"]
                                    ["rerender-app!" "markup" "target" "dispatch"]
                                    ["mount-app!" "markup" "target" "dispatch"]]],
                        "render-element" ["defn" "render-element" ["markup"] ["render-app" "markup" "@cache-element"]],
                        "mount-app!" ["defn"
                                      "mount-app!"
                                      ["markup" "target" "dispatch!"]
                                      ["let"
                                       [["element" ["render-element" "markup"]]
                                        ["deliver-event" ["build-deliver-event" "global-element" "dispatch!"]]]
                                       ["--" "println" "|mount app"]
                                       ["activate-instance" ["purify-element" "element"] "target" "deliver-event"]
                                       ["reset!" "global-element" "element"]
                                       ["reset!" "cache-element" "element"]]],
                        "falsify-stage!" ["defn"
                                          "falsify-stage!"
                                          ["target" "element" "dispatch!"]
                                          ["reset!" "global-element" ["mute-element" "element"]]
                                          ["reset!" "cache-element" "element"]],
                        "cache-element" ["defonce" "cache-element" ["atom" "nil"]],
                        "rerender-app!" ["defn"
                                         "rerender-app!"
                                         ["markup" "target" "dispatch!"]
                                         ["let"
                                          [["element" ["render-element" "markup"]]
                                           ["deliver-event" ["build-deliver-event" "global-element" "dispatch!"]]
                                           ["changes-ref" ["atom" ["[]"]]]
                                           ["collect!" ["fn" ["x"] ["swap!" "changes-ref" "conj" "x"]]]]
                                          ["--" "println" "@global-element"]
                                          ["--"
                                           "println"
                                           "|Changes:"
                                           ["pr-str" ["mapv" ["partial" "take" "2"] "@changes-ref"]]]
                                          ["find-element-diffs" "collect!" ["[]"] "@global-element" "element"]
                                          ["patch-instance" "@changes-ref" "target" "deliver-event"]
                                          ["reset!" "global-element" "element"]
                                          ["reset!" "cache-element" "element"]]],
                        "clear-cache!" ["defn" "clear-cache!" [] ["reset!" "cache-element" "nil"]]},
                 :procs []},
         "style.widget" {:ns ["ns" "respo.style.widget" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]]]],
                         :defs {"input" ["def"
                                         "input"
                                         ["{}"
                                          [":font-size" "|16px"]
                                          [":line-height" "|24px"]
                                          [":padding" "|0px 8px"]
                                          [":outline" ":none"]
                                          [":min-width" "|300px"]
                                          [":background-color" ["hsl" "0" "0" "94"]]
                                          [":border" ":none"]]],
                                "button" ["def"
                                          "button"
                                          ["{}"
                                           [":display" ":inline-block"]
                                           [":padding" "|0 6px 0 6px"]
                                           [":font-family" "|Avenir,Verdana"]
                                           [":cursor" ":pointer"]
                                           [":background-color" ["hsl" "0" "80" "70"]]
                                           [":color" ["hsl" "0" "0" "100"]]
                                           [":height" "28"]
                                           [":line-height" "|28px"]]]},
                         :procs []}}}
